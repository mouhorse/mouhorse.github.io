<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Neurofeedback</title>
    <url>/2023-09-01/Neurofeedback/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Neurofeedback"><a href="#Neurofeedback" class="headerlink" title="Neurofeedback"></a>Neurofeedback</h1><p>神经反馈（Neurofeedback）是一种基于脑电图（EEG）的生物反馈技术，通过实时监测大脑的电活动，并将这些信号转化为可视化或听觉化的反馈信息，帮助个体学习自我调节大脑功能。它广泛应用于注意力缺陷、焦虑、睡眠障碍等心理和神经问题的辅助治疗，以及提升认知能力和情绪管理。</p>
<span id="more"></span>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>EEG</tag>
      </tags>
  </entry>
  <entry>
    <title>MNE脑电预处理</title>
    <url>/2024-10-07/MNE%E8%84%91%E7%94%B5%E9%A2%84%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="MNE"><a href="#MNE" class="headerlink" title="MNE"></a>MNE</h1><p><a href="https://mne.tools/stable/overview/index.html">官网链接</a></p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> mne</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br></pre></td></tr></table></figure>
<h2 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h2><p>不同格式数据集使用的函数不同，具体在官网搜索</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw = mne.io.read_raw_brainvision(<span class="string">r&quot;test.vhdr&quot;</span>, preload=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p>此语句为了画图方便</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">%matplotlib</span><br></pre></td></tr></table></figure>
<h2 id="降采样"><a href="#降采样" class="headerlink" title="降采样"></a>降采样</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.resample(<span class="number">200</span>)</span><br></pre></td></tr></table></figure>
<h2 id="查看数据"><a href="#查看数据" class="headerlink" title="查看数据"></a>查看数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一屏展示10个位置信号，长10秒</span></span><br><span class="line">raw.plot(duration=<span class="number">10</span>, n_channels=<span class="number">10</span>) </span><br><span class="line"><span class="comment"># 绘制PSD</span></span><br><span class="line">raw.plot_psd(fmax=<span class="number">60</span>)                  </span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><a href="https://i-blog.csdnimg.cn/blog_migrate/dcde6379fd6c04d1ccbff8d7933d7478.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/dcde6379fd6c04d1ccbff8d7933d7478.png" alt="在这里插入图片描述"></a><br><a href="https://i-blog.csdnimg.cn/blog_migrate/3f2a621f9bc042d9bb2b1b3a48c0fdcd.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/3f2a621f9bc042d9bb2b1b3a48c0fdcd.png" alt="在这里插入图片描述"></a></p>
<h2 id="滤波"><a href="#滤波" class="headerlink" title="滤波"></a>滤波</h2><p>高通滤波、低通滤波</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.<span class="built_in">filter</span>(<span class="number">1</span>, <span class="number">60</span>)</span><br></pre></td></tr></table></figure>
<h2 id="过滤市电"><a href="#过滤市电" class="headerlink" title="过滤市电"></a>过滤市电</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.notch_filter(<span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<h2 id="查看数据-1"><a href="#查看数据-1" class="headerlink" title="查看数据"></a>查看数据</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.plot(duration=<span class="number">10</span>, n_channels=<span class="number">10</span>)</span><br><span class="line">raw.plot_psd(fmax=<span class="number">60</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>
<p><a href="https://i-blog.csdnimg.cn/blog_migrate/a035e139390a4cf1a6e5d35ba18c7d25.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/a035e139390a4cf1a6e5d35ba18c7d25.png" alt="在这里插入图片描述"></a></p>
<h2 id="标记坏导"><a href="#标记坏导" class="headerlink" title="标记坏导"></a>标记坏导</h2><p>坏导是手动添加的，直接补充在bads列表内</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.info[<span class="string">&quot;bads&quot;</span>].append(<span class="string">&quot;T7&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(raw.info)</span><br></pre></td></tr></table></figure>

<h2 id="插值坏导"><a href="#插值坏导" class="headerlink" title="插值坏导"></a>插值坏导</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># reset_bads=True作用是插值之后把bads列表清空</span></span><br><span class="line">raw.interpolate_bads(reset_bads=<span class="literal">True</span>, mode=<span class="string">&#x27;mean&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="重参考"><a href="#重参考" class="headerlink" title="重参考"></a>重参考</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># use average of mastoid channels as reference</span></span><br><span class="line">raw.set_eeg_reference(ref_channels=[<span class="string">&#x27;TP9&#x27;</span>, <span class="string">&#x27;TP10&#x27;</span>])</span><br></pre></td></tr></table></figure>
<h2 id="ICA"><a href="#ICA" class="headerlink" title="ICA"></a>ICA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ica = mne.preprocessing.ICA(n_components=<span class="number">20</span>, random_state=<span class="number">0</span>)</span><br><span class="line">ica.fit(raw)</span><br></pre></td></tr></table></figure>
<h2 id="查看捕获到的伪迹"><a href="#查看捕获到的伪迹" class="headerlink" title="查看捕获到的伪迹"></a>查看捕获到的伪迹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">raw.load_data()</span><br><span class="line">ica.plot_sources(raw, show_scrollbars=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p><a href="https://i-blog.csdnimg.cn/blog_migrate/11f9595417eaf32de7b28a32caec39a3.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/11f9595417eaf32de7b28a32caec39a3.png" alt="在这里插入图片描述"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ica.plot_components()</span><br></pre></td></tr></table></figure>
<p><a href="https://i-blog.csdnimg.cn/blog_migrate/1e60aa4d6dd5b6f7580880c3e83ee432.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/1e60aa4d6dd5b6f7580880c3e83ee432.png" alt="在这里插入图片描述"></a></p>
<h2 id="删除伪迹"><a href="#删除伪迹" class="headerlink" title="删除伪迹"></a>删除伪迹</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除前两个</span></span><br><span class="line">ica.exclude = [<span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line">ica.apply(raw)</span><br><span class="line"></span><br><span class="line">raw.load_data()</span><br><span class="line">ica.plot_sources(raw, show_scrollbars=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>前两个变灰，消失<br><a href="https://i-blog.csdnimg.cn/blog_migrate/bbb0c63aba05af015d7fc606436a403f.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/bbb0c63aba05af015d7fc606436a403f.png" alt="在这里插入图片描述"></a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>科研</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo安装并修改主题</title>
    <url>/2025-02-23/Hexo%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BF%AE%E6%94%B9%E4%B8%BB%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="安装-Hexo-并使用-Butterfly-主题教程"><a href="#安装-Hexo-并使用-Butterfly-主题教程" class="headerlink" title="安装 Hexo 并使用 Butterfly 主题教程"></a>安装 Hexo 并使用 Butterfly 主题教程</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>Hexo 是一个快速、简洁且高效的静态博客框架，而 Butterfly 是一款基于 Hexo 的主题，具有美观的界面和丰富的功能。本教程将指导你如何安装 Hexo 并将主题切换为 Butterfly。</p>
<h2 id="二、安装-Hexo"><a href="#二、安装-Hexo" class="headerlink" title="二、安装 Hexo"></a>二、安装 Hexo</h2><h3 id="1-安装-Node-js-和-npm"><a href="#1-安装-Node-js-和-npm" class="headerlink" title="1. 安装 Node.js 和 npm"></a>1. 安装 Node.js 和 npm</h3><p>Hexo 基于 Node.js 构建，因此在安装 Hexo 之前，需要先安装 Node.js 和 npm（Node.js 的包管理工具）。你可以通过以下步骤安装：</p>
<ul>
<li><strong>Windows 和 macOS 用户</strong>：访问 <a href="https://nodejs.org/">Node.js 官方网站</a>，下载并安装最新版本的 Node.js。安装过程中会自动包含 npm。</li>
<li><strong>Linux 用户</strong>：可以通过包管理器安装 Node.js 和 npm。例如，在 Ubuntu 上可以运行以下命令：</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install nodejs npm</span><br></pre></td></tr></table></figure>

<p>安装完成后，运行以下命令检查 Node.js 和 npm 是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>如果返回了版本号，说明安装成功。</p>
<h3 id="2-安装-Hexo"><a href="#2-安装-Hexo" class="headerlink" title="2. 安装 Hexo"></a>2. 安装 Hexo</h3><p>在命令行中运行以下命令安装 Hexo：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，运行以下命令检查 Hexo 是否安装成功：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>

<p>如果返回了 Hexo 的版本号，说明安装成功。</p>
<h3 id="3-初始化-Hexo-站点"><a href="#3-初始化-Hexo-站点" class="headerlink" title="3. 初始化 Hexo 站点"></a>3. 初始化 Hexo 站点</h3><p>选择一个合适的目录作为你的博客站点目录，然后运行以下命令初始化 Hexo 站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br></pre></td></tr></table></figure>

<p>其中 <code>myblog</code> 是你的站点目录名称，你可以根据自己的喜好修改。</p>
<p>初始化完成后，进入站点目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> myblog</span><br></pre></td></tr></table></figure>

<h3 id="4-安装依赖"><a href="#4-安装依赖" class="headerlink" title="4. 安装依赖"></a>4. 安装依赖</h3><p>在站点目录中运行以下命令安装 Hexo 所需的依赖：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>安装完成后，你的 Hexo 站点就初始化完成了。</p>
<h2 id="三、安装-Butterfly-主题"><a href="#三、安装-Butterfly-主题" class="headerlink" title="三、安装 Butterfly 主题"></a>三、安装 Butterfly 主题</h2><h3 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1. 安装主题"></a>1. 安装主题</h3><p>在站点目录中运行以下命令安装 Butterfly 主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-butterfly --save</span><br></pre></td></tr></table></figure>

<h3 id="2-配置主题"><a href="#2-配置主题" class="headerlink" title="2. 配置主题"></a>2. 配置主题</h3><p>在站点目录中找到 <code>_config.yml</code> 文件，打开并修改 <code>theme</code> 配置项，将其值设置为 <code>butterfly</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>

<p>保存并关闭 <code>_config.yml</code> 文件。</p>
<h3 id="3-配置主题选项（可选）"><a href="#3-配置主题选项（可选）" class="headerlink" title="3. 配置主题选项（可选）"></a>3. 配置主题选项（可选）</h3><p>Butterfly 主题提供了丰富的配置选项，你可以通过修改主题的配置文件来调整主题的外观和功能。主题的配置文件位于 <code>themes/butterfly/_config.yml</code>，你可以根据自己的需求进行修改。</p>
<p>例如，你可以修改主题的颜色、布局、菜单等选项。具体配置项的说明可以在 Butterfly 主题的 <a href="https://butterfly.js.org/posts/1d97604e/">官方文档</a> 中查看。</p>
<h2 id="四、启动-Hexo-服务器"><a href="#四、启动-Hexo-服务器" class="headerlink" title="四、启动 Hexo 服务器"></a>四、启动 Hexo 服务器</h2><p>在站点目录中运行以下命令启动 Hexo 服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>启动成功后，浏览器会自动打开 <code>http://localhost:4000</code>，你可以看到你的博客已经使用 Butterfly 主题了。</p>
<h2 id="五、生成静态文件"><a href="#五、生成静态文件" class="headerlink" title="五、生成静态文件"></a>五、生成静态文件</h2><p>当你完成博客的编辑后，可以运行以下命令生成静态文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g</span><br></pre></td></tr></table></figure>

<p>生成的静态文件位于站点目录的 <code>public</code> 文件夹中，你可以将这些文件部署到服务器上，让其他人访问你的博客。</p>
<h2 id="六、部署到服务器（可选）"><a href="#六、部署到服务器（可选）" class="headerlink" title="六、部署到服务器（可选）"></a>六、部署到服务器（可选）</h2><p>Hexo 提供了多种部署方式，例如部署到 GitHub Pages、GitLab Pages、Vercel 等。你可以通过修改 <code>_config.yml</code> 文件中的 <code>deploy</code> 配置项来选择部署方式。</p>
<p>例如，如果你想要将博客部署到 GitHub Pages，可以按照以下步骤操作：</p>
<ol>
<li>在 <code>_config.yml</code> 文件中添加以下配置：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/your-username/your-repo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure>

<p>其中 <code>your-username</code> 是你的 GitHub 用户名，<code>your-repo</code> 是你的 GitHub 仓库名称，<code>main</code> 是分支名称。</p>
<ol start="2">
<li>运行以下命令部署博客：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure>

<p>部署完成后，你的博客就会出现在 GitHub Pages 上了。</p>
<h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>通过以上步骤，你已经成功安装了 Hexo 并将主题切换为 Butterfly。你可以根据自己的需求继续探索 Hexo 和 Butterfly 的更多功能，打造一个属于自己的个性化博客。</p>
<p>如果你在安装过程中遇到任何问题，可以查看 Hexo 和 Butterfly 主题的官方文档，或者在相关社区中寻求帮助。</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>脱坑笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018-09-01/hello-world/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
  </entry>
  <entry>
    <title>Butterfly 个性化配置教程</title>
    <url>/2025-02-23/Butterfly-%E4%B8%AA%E6%80%A7%E5%8C%96%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="Butterfly-个性化配置教程"><a href="#Butterfly-个性化配置教程" class="headerlink" title="Butterfly 个性化配置教程"></a>Butterfly 个性化配置教程</h1><p>官方教程<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 文档</a></p>
<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>Butterfly 是一款基于 Vue.js 和 Markdown 的静态博客生成器，以其简洁、灵活和强大的主题系统而受到许多开发者的喜爱。通过个性化配置，你可以轻松打造一个独一无二的个人博客或项目网站。本教程将带你一步步完成 Butterfly 的个性化配置。</p>
<h2 id="2-安装与初始化"><a href="#2-安装与初始化" class="headerlink" title="2. 安装与初始化"></a>2. 安装与初始化</h2><h3 id="2-1-安装-Hexo"><a href="#2-1-安装-Hexo" class="headerlink" title="2.1 安装 Hexo"></a>2.1 安装 Hexo</h3><p>Butterfly 是基于 Hexo 的主题，因此首先需要安装 Hexo。在终端中运行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装完成后，创建一个新的 Hexo 站点：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init myblog</span><br><span class="line"><span class="built_in">cd</span> myblog</span><br></pre></td></tr></table></figure>

<h3 id="2-2-安装-Butterfly-主题"><a href="#2-2-安装-Butterfly-主题" class="headerlink" title="2.2 安装 Butterfly 主题"></a>2.2 安装 Butterfly 主题</h3><p>在站点目录下，运行以下命令安装 Butterfly 主题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-theme-butterfly --save</span><br></pre></td></tr></table></figure>

<p>安装完成后，修改 <code>_config.yml</code> 文件，将主题设置为 <code>butterfly</code>：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure>

<h3 id="2-3-初始化主题配置"><a href="#2-3-初始化主题配置" class="headerlink" title="2.3 初始化主题配置"></a>2.3 初始化主题配置</h3><p>在站点根目录下，运行以下命令初始化 Butterfly 的配置文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init-config</span><br></pre></td></tr></table></figure>

<p>这将生成 <code>_config.butterfly.yml</code> 文件，用于后续的个性化配置。</p>
<h2 id="3-基础配置"><a href="#3-基础配置" class="headerlink" title="3. 基础配置"></a>3. 基础配置</h2><h3 id="3-1-站点信息"><a href="#3-1-站点信息" class="headerlink" title="3.1 站点信息"></a>3.1 站点信息</h3><p>在 <code>_config.yml</code> 文件中，配置你的站点信息，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">你的博客名称</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">你的副标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">你的博客描述</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">你的名字</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">Asia/Shanghai</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-主题配置"><a href="#3-2-主题配置" class="headerlink" title="3.2 主题配置"></a>3.2 主题配置</h3><p>在 <code>_config.butterfly.yml</code> 文件中，你可以进行更详细的个性化配置。以下是一些常用配置：</p>
<h4 id="3-2-1-网站标题和副标题"><a href="#3-2-1-网站标题和副标题" class="headerlink" title="3.2.1 网站标题和副标题"></a>3.2.1 网站标题和副标题</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站标题</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">你的博客名称</span></span><br><span class="line"><span class="comment"># 网站副标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">你的副标题</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-2-网站图标"><a href="#3-2-2-网站图标" class="headerlink" title="3.2.2 网站图标"></a>3.2.2 网站图标</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 网站图标</span></span><br><span class="line"><span class="attr">favicon:</span> <span class="string">/images/favicon.ico</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-3-菜单配置"><a href="#3-2-3-菜单配置" class="headerlink" title="3.2.3 菜单配置"></a>3.2.3 菜单配置</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 菜单</span></span><br><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">Home:</span> <span class="string">/</span></span><br><span class="line">  <span class="attr">Archives:</span> <span class="string">/archives/</span></span><br><span class="line">  <span class="attr">Tags:</span> <span class="string">/tags/</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-4-社交链接"><a href="#3-2-4-社交链接" class="headerlink" title="3.2.4 社交链接"></a>3.2.4 社交链接</h4><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 社交链接</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/your-github</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/your-twitter</span></span><br><span class="line">  <span class="attr">Weibo:</span> <span class="string">https://weibo.com/your-weibo</span></span><br></pre></td></tr></table></figure>

<h2 id="4-样式与布局"><a href="#4-样式与布局" class="headerlink" title="4. 样式与布局"></a>4. 样式与布局</h2><h3 id="4-1-主题风格"><a href="#4-1-主题风格" class="headerlink" title="4.1 主题风格"></a>4.1 主题风格</h3><p>Butterfly 提供多种主题风格，你可以在 <code>_config.butterfly.yml</code> 中选择自己喜欢的风格：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 主题风格</span></span><br><span class="line"><span class="attr">theme_style:</span> <span class="string">&#x27;style1&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可选风格包括：</p>
<ul>
<li><code>style1</code>：默认风格</li>
<li><code>style2</code>：深色风格</li>
<li><code>style3</code>：浅色风格</li>
</ul>
<h3 id="4-2-布局调整"><a href="#4-2-布局调整" class="headerlink" title="4.2 布局调整"></a>4.2 布局调整</h3><p>你可以通过 <code>_config.butterfly.yml</code> 文件调整页面布局，例如：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 首页布局</span></span><br><span class="line"><span class="attr">index_layout:</span> <span class="string">&#x27;grid&#x27;</span></span><br><span class="line"><span class="comment"># 文章页面布局</span></span><br><span class="line"><span class="attr">post_layout:</span> <span class="string">&#x27;single&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-3-自定义-CSS"><a href="#4-3-自定义-CSS" class="headerlink" title="4.3 自定义 CSS"></a>4.3 自定义 CSS</h3><p>如果你需要进一步自定义样式，可以在主题目录下的 <code>source/css</code> 文件夹中添加自定义的 CSS 文件，并在 <code>_config.butterfly.yml</code> 中引用：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自定义 CSS</span></span><br><span class="line"><span class="attr">custom_css:</span> <span class="string">/css/custom.css</span></span><br></pre></td></tr></table></figure>

<h2 id="5-功能配置"><a href="#5-功能配置" class="headerlink" title="5. 功能配置"></a>5. 功能配置</h2><h3 id="5-1-评论系统"><a href="#5-1-评论系统" class="headerlink" title="5.1 评论系统"></a>5.1 评论系统</h3><p>Butterfly 支持多种评论系统，例如 Valine、Disqus 和 Gitalk。以下以 Valine 为例进行配置：</p>
<ol>
<li>在 <code>_config.butterfly.yml</code> 中启用 Valine：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Valine 配置</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="string">你的</span> <span class="string">Valine</span> <span class="string">App</span> <span class="string">ID</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="string">你的</span> <span class="string">Valine</span> <span class="string">App</span> <span class="string">Key</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在文章页面中添加评论区域：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">comments: true</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure>

<h3 id="5-2-搜索功能"><a href="#5-2-搜索功能" class="headerlink" title="5.2 搜索功能"></a>5.2 搜索功能</h3><p>Butterfly 内置了搜索功能，你只需要在 <code>_config.butterfly.yml</code> 中启用它：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索功能</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="5-3-代码高亮"><a href="#5-3-代码高亮" class="headerlink" title="5.3 代码高亮"></a>5.3 代码高亮</h3><p>Butterfly 使用 Prism.js 进行代码高亮，你可以自定义代码高亮的样式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 代码高亮</span></span><br><span class="line"><span class="attr">prismjs:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">theme:</span> <span class="string">&#x27;default&#x27;</span></span><br></pre></td></tr></table></figure>

<p>可选主题包括：</p>
<ul>
<li><code>default</code>：默认主题</li>
<li><code>okaidia</code>：深色主题</li>
<li><code>twilight</code>：浅色主题</li>
</ul>
<h2 id="6-部署"><a href="#6-部署" class="headerlink" title="6. 部署"></a>6. 部署</h2><h3 id="6-1-本地预览"><a href="#6-1-本地预览" class="headerlink" title="6.1 本地预览"></a>6.1 本地预览</h3><p>在终端中运行以下命令启动本地服务器：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>访问 <code>http://localhost:4000</code> 查看你的博客。</p>
<h3 id="6-2-部署到-GitHub-Pages"><a href="#6-2-部署到-GitHub-Pages" class="headerlink" title="6.2 部署到 GitHub Pages"></a>6.2 部署到 GitHub Pages</h3><ol>
<li>在 <code>_config.yml</code> 文件中配置部署信息：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/your-github/your-repo.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">gh-pages</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>运行以下命令进行部署：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<h2 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7. 常见问题"></a>7. 常见问题</h2><h3 id="7-1-如何添加自定义页面？"><a href="#7-1-如何添加自定义页面？" class="headerlink" title="7.1 如何添加自定义页面？"></a>7.1 如何添加自定义页面？</h3><p>在站点根目录下运行以下命令创建自定义页面：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">&quot;about&quot;</span></span><br></pre></td></tr></table></figure>

<p>然后在 <code>_config.butterfly.yml</code> 中添加菜单项：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">About:</span> <span class="string">/about/</span></span><br></pre></td></tr></table></figure>

<h3 id="7-2-如何修改文章的日期格式？"><a href="#7-2-如何修改文章的日期格式？" class="headerlink" title="7.2 如何修改文章的日期格式？"></a>7.2 如何修改文章的日期格式？</h3><p>在 <code>_config.yml</code> 文件中修改日期格式：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">date_format:</span> <span class="string">YYYY-MM-DD</span></span><br><span class="line"><span class="attr">time_format:</span> <span class="string">HH:mm:ss</span></span><br></pre></td></tr></table></figure>

</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>脱坑笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>解决 Hexo 部署到 GitHub Pages 自定义域名失效</title>
    <url>/2025-02-24/%E8%A7%A3%E5%86%B3-Hexo-%E9%83%A8%E7%BD%B2%E5%88%B0-GitHub-Pages-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%A4%B1%E6%95%88/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h1 id="解决-Hexo-部署到-GitHub-Pages-自定义域名失效问题"><a href="#解决-Hexo-部署到-GitHub-Pages-自定义域名失效问题" class="headerlink" title="解决 Hexo 部署到 GitHub Pages 自定义域名失效问题"></a>解决 Hexo 部署到 GitHub Pages 自定义域名失效问题</h1><p>在使用 Hexo 部署博客到 GitHub Pages 时，可能会遇到每次运行 <code>hexo d</code> 后自定义域名失效的问题。以下是两种解决方法，帮助你实现自定义域名的永久配置。</p>
<p>方法一就够用了</p>
<h2 id="方法一：手动添加-CNAME-文件"><a href="#方法一：手动添加-CNAME-文件" class="headerlink" title="方法一：手动添加 CNAME 文件"></a>方法一：手动添加 <code>CNAME</code> 文件</h2><ol>
<li><p><strong>找到 <code>source</code> 文件夹</strong><br>在 Hexo 博客的根目录下，找到名为 <code>source</code> 的文件夹（注意不是主题的 <code>source</code> 文件夹）。</p>
</li>
<li><p><strong>创建 <code>CNAME</code> 文件</strong><br>在 <code>source</code> 文件夹中新建一个文件，命名为 <code>CNAME</code>（全部大写，无后缀，不是CNAME.yml）。</p>
</li>
<li><p><strong>写入自定义域名</strong><br>在 <code>CNAME</code> 文件中写入你的自定义域名（不包含 <code>http://</code> 或 <code>www.</code> 等），例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bilicili.com</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>保存并部署</strong><br>保存文件后，运行以下命令进行部署：</p>
</li>
</ol>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>   每次部署时，<code>CNAME</code> 文件都会被同步到 GitHub Pages，从而避免域名失效。</p>
<h2 id="方法二：使用-hexo-generator-cname-插件"><a href="#方法二：使用-hexo-generator-cname-插件" class="headerlink" title="方法二：使用 hexo-generator-cname 插件"></a>方法二：使用 <code>hexo-generator-cname</code> 插件</h2><ol>
<li><p><strong>安装插件</strong><br>在 Hexo 博客的根目录下运行以下命令安装插件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-cname --save</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>配置插件</strong><br>在 <code>_config.yml</code> 文件中添加以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">plugins:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">hexo-generator-cname</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>部署博客</strong><br>保存配置文件后，运行以下命令进行部署：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>
<p>插件会自动生成 <code>CNAME</code> 文件并部署到 GitHub Pages。</p>
</li>
</ol>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>如果你之前已经安装了 <code>hexo-generator-cname</code> 插件，但仍然遇到问题，可以尝试卸载插件，然后按照方法一手动添加 <code>CNAME</code> 文件。</li>
<li>确保在 GitHub Pages 的设置中正确配置了自定义域名，并且域名解析设置正确。</li>
<li>如果你使用的是 HTTPS，还需要在 GitHub Pages 设置中开启强制 HTTPS 功能。</li>
</ul>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>脱坑笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>[本科毕设]pytorch-人脸表情识别</title>
    <url>/2022-07-01/%E6%9C%AC%E7%A7%91%E6%AF%95%E8%AE%BE-pytorch-%E4%BA%BA%E8%84%B8%E8%A1%A8%E6%83%85%E8%AF%86%E5%88%AB/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote>
<p>两年前的存货</p>
</blockquote>
<hr>
<p>&#x3D;&#x3D;不提供源码，以后某天可能会开源到github上，本文只是向你提供我的思路，自己动手丰衣足食&#x3D;&#x3D;<br>此作品诞生于公元2022年，天临四年，卢雷元年😅😅</p>
<h1 id="基于卷积神经网络的人脸表情识别"><a href="#基于卷积神经网络的人脸表情识别" class="headerlink" title="基于卷积神经网络的人脸表情识别"></a>基于卷积神经网络的人脸表情识别</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>实现了对图片、视频和摄像头三种情况下的人脸表情进行检测。<br>可以检测出七种表情：[‘生气’, ‘厌恶’, ‘害怕’, ‘开心’, ‘自然’, ‘伤心’, ‘吃惊’]</p>
<h3 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h3><p><a href="/../images/bs1.jpeg" title="请添加图片描述" class="gallery-item"><img src="/../images/bs1.jpeg" alt="请添加图片描述"></a></p>
<h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p><del>我不是深度学习方向的大佬，只是一个比小白懂的稍微多一点的菜鸟</del><br>因为把大象放进冰箱需要三步，所以此系统的整体构思也是三步：</p>
<ol>
<li>检测出图片内人脸所在区域</li>
<li>对此区域进行卷积表情识别</li>
<li>将检测的结果显示在界面上</li>
</ol>
<p><strong>易知，此系统最关键的是图片内的人脸定位，若是定位错误，其它的都是白搭</strong></p>
<h2 id="数据集准备"><a href="#数据集准备" class="headerlink" title="数据集准备"></a>数据集准备</h2><p>众所周知，深度学习最重要的是有合适的数据集，在此附上我使用的两个数据集。<br>1.<a href="https://wenku.baidu.com/view/58f9bf7c322b3169a45177232f60ddccda38e602.html">人脸检测数据集</a>，抱歉，此数据集百度网盘无法分享。<br>2.<a href="https://www.kaggle.com/datasets/mahmoudima/mma-facial-expression?select=MMAFEDB">表情识别数据集</a></p>
<h2 id="人脸检测算法"><a href="#人脸检测算法" class="headerlink" title="人脸检测算法"></a>人脸检测算法</h2><p>最初我是打算自己制作数据集，自己构造神经网络来实现对图片内单个人脸定位功能。先从百度上爬取单人照片，对其进行标注，然后构造神经网络进行训练，最终失败了，哈哈哈，不能准确的定位到人脸。</p>
<p>然后我开始寻找和复现开源算法，然后发现了<strong>Retinaface</strong>人脸检测算法，此算法不仅可以对图片内的多张人脸进行检测，还可以选择Retinaface或者MobilenetV1当作主干网络，满足不同情况下的需求。</p>
<p>实现Retinaface的代码你可以自己复现，也可以搬用其他博主发布的算法代码，具体怎么操作看你自己，本文此处略过。</p>
<p>学习之前建议你先了解一下：先验框，上采样，特征金字塔。这些基本名词的意思。</p>
<p>学习此算法需要耗费大量的时间，毕竟是系统的核心，建议借鉴别人发布的代码。</p>
<p>Retinaface论文内运行结果配图如下所示：<br><a href="/../images/bs2.png" title="在这里插入图片描述" class="gallery-item"><img src="/../images/bs2.png" alt="在这里插入图片描述"></a></p>
<h2 id="表情识别算法"><a href="#表情识别算法" class="headerlink" title="表情识别算法"></a>表情识别算法</h2><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>这有什么思路啊，我只是个小白，又不会自己创造算法，我只学过手写字体识别，然后……嗯……类比一下，就构造了此处所需的表情识别网络。</p>
<p>先看看这七种表情的展示，相互之间差异很小，哪有十个数字之间差异大。因此我模型整体正确率也不高。<br><a href="/../images/bs3.png" title="在这里插入图片描述" class="gallery-item"><img src="/../images/bs3.png" alt="在这里插入图片描述"></a><br>我能做的就是对数据集进行多次卷积处里，卷积核大小和卷积次数多少全看我心情。</p>
<h3 id="卷积代码"><a href="#卷积代码" class="headerlink" title="卷积代码"></a>卷积代码</h3><p>主要代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.layer1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">16</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">16</span>, kernel_size=<span class="number">5</span>, padding=<span class="number">2</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">16</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.layer2 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">16</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">64</span>, kernel_size=<span class="number">1</span>, padding=<span class="number">0</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.layer3 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">64</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=<span class="number">1</span>, padding=<span class="number">0</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">128</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">128</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">self</span>.layer4 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">128</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">256</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">1</span>, padding=<span class="number">0</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">256</span>),</span><br><span class="line">            nn.Conv2d(<span class="number">256</span>, <span class="number">256</span>, kernel_size=<span class="number">3</span>, padding=<span class="number">1</span>),</span><br><span class="line">            nn.RReLU(inplace=<span class="literal">True</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">256</span>)</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>
<p>构建算法我很随意的，没有耗费太多时间，我的时间都耗费在了调参和训练算法上。</p>
<h3 id="卷积参数初始化"><a href="#卷积参数初始化" class="headerlink" title="卷积参数初始化"></a>卷积参数初始化</h3><p>此步骤有就行，没不要一直调整初始化参数的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">initialize_weights</span>(<span class="params">m</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">isinstance</span>(m, nn.Conv2d):</span><br><span class="line">        m.weight.data.normal_(<span class="number">0</span>, <span class="number">0.02</span>)</span><br><span class="line">        m.bias.data.zero_()</span><br><span class="line">    <span class="keyword">elif</span> <span class="built_in">isinstance</span>(m, nn.Linear):</span><br><span class="line">        m.weight.data.normal_(<span class="number">0</span>, <span class="number">0.02</span>)</span><br><span class="line">        m.bias.data.zero_()</span><br></pre></td></tr></table></figure>
<h3 id="学习率调整"><a href="#学习率调整" class="headerlink" title="学习率调整"></a>学习率调整</h3><p>此处我经过了n次的调整，调整后又重新训练看效果，过程很慢，很好划水……<br>最终训练时选择的参数为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = optim.Adam(net.parameters() , lr=<span class="number">0.0001</span>)</span><br><span class="line">exp_lr_scheduler = lr_scheduler.StepLR(optimizer, step_size=<span class="number">20</span>, gamma=<span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line">criterion = nn.CrossEntropyLoss()</span><br></pre></td></tr></table></figure>
<h3 id="最终结果"><a href="#最终结果" class="headerlink" title="最终结果"></a>最终结果</h3><p>正确率不高，只有63%，感觉以为自己挺菜的，写的是什么垃圾代码😑，但是！！！在kaggle网站上此数据集主页内，其他用户发布了自己构建模型的代码和正确率，全是60%左右，甚至正确率还没我高哦，瞬间感觉自己挺强的。😁😁😁</p>
<h2 id="系统构建"><a href="#系统构建" class="headerlink" title="系统构建"></a>系统构建</h2><h3 id="代码合体"><a href="#代码合体" class="headerlink" title="代码合体"></a>代码合体</h3><p>将上文构建的人脸检测算法和表情识别算法合体，串联起来，就能实现本论文的主题：表情检测。</p>
<p>什么？你告诉我你不会串？那你还是没搞懂这两个算法。</p>
<h3 id="视频检测"><a href="#视频检测" class="headerlink" title="视频检测"></a>视频检测</h3><p>对图片检测挺简单的，直接传输就行，但是呢，视频却不能直接喂给神经网络，此处我的思路是利用opencv将视频分割成一桢一帧的图片，然后传输给算法，再将图片一桢一帧的显示出来，构成视频，fps快的时候，就感受不到是图片了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">self</span>.capture = cv2.VideoCapture(fileName)</span><br><span class="line"><span class="keyword">while</span> (<span class="literal">True</span>):</span><br><span class="line">    <span class="comment"># 读取一帧</span></span><br><span class="line">    ref, frame = <span class="variable language_">self</span>.capture.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ref:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="comment"># 格式转变,因为opencv不是RGB</span></span><br><span class="line">    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)</span><br><span class="line">    frame = np.array(retinaface.detect(frame))</span><br></pre></td></tr></table></figure>
<p>电脑性能不行的话会很卡，我也没办法，反正我这里会卡，尽量选取的视频像素少一点。</p>
<p>调用摄像头检测同理。</p>
<h3 id="可视化界面"><a href="#可视化界面" class="headerlink" title="可视化界面"></a>可视化界面</h3><p>我选择的是使用pyqt5，然后利用qtdesinger软件，很简便的搭建出了我需要的界面<br><a href="/../images/bs4.png" title="在这里插入图片描述" class="gallery-item"><img src="/../images/bs4.png" alt="在这里插入图片描述"></a></p>
<p>有手就行。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>四年大学时光转瞬即逝，蓦然回首，本科生活即将结束，马上就要离开校园<br>去更广阔的环境去度过人生的下一阶段。</p>
<p>愿终有一天学有所成，实现父母对自己的期望。</p>
<p><strong>祝大家毕业设计顺利完成。</strong></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>毕业设计</tag>
      </tags>
  </entry>
  <entry>
    <title>MNIST手写数字识别总结(pytorch)</title>
    <url>/2022-02-16/MNIST%E6%89%8B%E5%86%99%E6%95%B0%E5%AD%97%E8%AF%86%E5%88%AB%E6%80%BB%E7%BB%93-pytorch/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p> 此博客并不是教程，只是一个练习总结 </p>
<p> 代码汇总放在文末 </p>
<h1 id="1-首先导入所需要的库"><a href="#1-首先导入所需要的库" class="headerlink" title="1.首先导入所需要的库"></a>1.首先导入所需要的库</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Util <span class="keyword">import</span> plot_image,pd_one_hot <span class="comment">#辅助函数，在博客末尾附上</span></span><br></pre></td></tr></table></figure>

<h1 id="2-数据集"><a href="#2-数据集" class="headerlink" title="2.数据集"></a>2.数据集</h1><p>   此数据集总共包含70K张图片，其中60K作为训练集，10K作为测试集。<br>   更多消息可以查看官网官网链接：<a href="http://yann.lecun.com/exdb/mnist/">官网</a></p>
<h1 id="3-加载数据"><a href="#3-加载数据" class="headerlink" title="3.加载数据"></a>3.加载数据</h1><p>   batch_size设置一次处理多少图片，此处设置为512张图片，这样并行处理可以cpu，gpu加快处理速度</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">batch_size = <span class="number">512</span></span><br></pre></td></tr></table></figure>

<p>加载训练集，测试集图片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    torchvision.datasets.MNIST(<span class="string">&#x27;mnist_data&#x27;</span>      <span class="comment">#数据集文件夹名</span></span><br><span class="line">                               ,train=<span class="literal">True</span></span><br><span class="line">                               ,download=<span class="literal">True</span>    <span class="comment">#当电脑没此数据的时候会自动下载数据集</span></span><br><span class="line">                               ,transform=torchvision.transforms.Compose([</span><br><span class="line">                                   torchvision.transforms.ToTensor()        <span class="comment">#矩阵转化为张量</span></span><br><span class="line">                                  ,torchvision.transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                               ])</span><br><span class="line">                              )</span><br><span class="line">    ,batch_size=batch_size</span><br><span class="line">    ,shuffle=<span class="literal">True</span>              <span class="comment"># 设置随机打散</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    torchvision.datasets.MNIST(<span class="string">&#x27;mnist_data&#x27;</span></span><br><span class="line">                               ,train=<span class="literal">False</span></span><br><span class="line">                               ,download=<span class="literal">True</span></span><br><span class="line">                               ,transform=torchvision.transforms.Compose([</span><br><span class="line">                                   torchvision.transforms.ToTensor()</span><br><span class="line">                                  ,torchvision.transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                               ])</span><br><span class="line">                              ),</span><br><span class="line">    batch_size=batch_size</span><br><span class="line">   ,shuffle=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<h1 id="4-数据可视化"><a href="#4-数据可视化" class="headerlink" title="4.数据可视化"></a>4.数据可视化</h1><p>只查看9张图片，可在辅助函数内修改为其它值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x, y = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))</span><br><span class="line"><span class="built_in">print</span>(x.shape, y.shape)		<span class="comment"># 查看数据集大小</span></span><br><span class="line">plot_image(x, y, <span class="string">&#x27;image sample&#x27;</span>)</span><br><span class="line">torch.Size([<span class="number">512</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>]) torch.Size([<span class="number">512</span>])</span><br></pre></td></tr></table></figure>

<p>注：<br>512, 1, 28, 28:四维矩阵，512张图片，1个通道，大小为28*28<br>1个通道的意思为单色，若改为3则是RGB彩色</p>
<p><a href="https://i-blog.csdnimg.cn/blog_migrate/b54dd67c86c587b98b562058bcbe53b6.png#pic_center" title="null" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/b54dd67c86c587b98b562058bcbe53b6.png#pic_center" alt="null"></a></p>
<h1 id="5-定义神经网络"><a href="#5-定义神经网络" class="headerlink" title="5.定义神经网络"></a>5.定义神经网络</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net , <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">28</span>*<span class="number">28</span> , <span class="number">256</span>)  <span class="comment"># 输入和输出的维度，根据经验自己设置</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">256</span> , <span class="number">64</span>)	   <span class="comment"># 输入维度要等于上层的输出维度</span></span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">64</span> , <span class="number">10</span>)      <span class="comment"># 数字结果为0~9，所以最后输出值为10个维度</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self , x</span>):</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))			   <span class="comment"># relu 激活函数</span></span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br></pre></td></tr></table></figure>

<h1 id="6-训练测试集"><a href="#6-训练测试集" class="headerlink" title="6.训练测试集"></a>6.训练测试集</h1><h2 id="1-初始化网络"><a href="#1-初始化网络" class="headerlink" title="1.初始化网络"></a>1.初始化网络</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">net = Net()</span><br></pre></td></tr></table></figure>

<h2 id="2-设置学习率"><a href="#2-设置学习率" class="headerlink" title="2.设置学习率"></a>2.设置学习率</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">optimizer = optim.SGD(net.parameters() , lr = <span class="number">0.01</span> , momentum= <span class="number">0.9</span>)</span><br></pre></td></tr></table></figure>

<h2 id="3-迭代"><a href="#3-迭代" class="headerlink" title="3.迭代"></a>3.迭代</h2><p>此处没有调用GPU处理数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">loss_s = [ ]   <span class="comment"># 存储损失值</span></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):	<span class="comment"># 迭代三次</span></span><br><span class="line">    <span class="keyword">for</span> location , (x,y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>) , <span class="number">28</span>*<span class="number">28</span>)    <span class="comment">#将图片矩阵打平</span></span><br><span class="line">        out = net(x)</span><br><span class="line">        y_onehot = pd_one_hot(y)</span><br><span class="line">        </span><br><span class="line">        loss = F.mse_loss(out , torch.from_numpy(y_onehot).<span class="built_in">float</span>())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 计算梯度</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 更新梯度</span></span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(location % <span class="number">5</span> == <span class="number">0</span>):    <span class="comment"># 每处理5*512张图片记录一次损失函数值</span></span><br><span class="line">            loss_s.append(loss.item())	<span class="comment"># .item的意思为只输出值</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span> , each+<span class="number">1</span> , <span class="string">&#x27;次迭代完成&#x27;</span>)</span><br><span class="line">第 <span class="number">1</span> 次迭代完成</span><br><span class="line">第 <span class="number">2</span> 次迭代完成</span><br><span class="line">第 <span class="number">3</span> 次迭代完成</span><br></pre></td></tr></table></figure>

<h2 id="4-查看损失值"><a href="#4-查看损失值" class="headerlink" title="4.查看损失值"></a>4.查看损失值</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(loss_s)) , loss_s , <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

<p>损失值递减且趋于稳定，训练过程正确<br><a href="https://i-blog.csdnimg.cn/blog_migrate/c9b4c17aab281d5461ce65890cf41747.png#pic_center" title="null" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/c9b4c17aab281d5461ce65890cf41747.png#pic_center" alt="null"></a></p>
<h1 id="7-预测训练集"><a href="#7-预测训练集" class="headerlink" title="7.预测训练集"></a>7.预测训练集</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 存储预测正确图片的数量</span></span><br><span class="line">total_correct = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> test_loader:</span><br><span class="line">    x  = x.view(x.size(<span class="number">0</span>), <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">    out = net(x)</span><br><span class="line">    pred = out.argmax(dim=<span class="number">1</span>)	<span class="comment"># 取最大值概率所在的位置</span></span><br><span class="line">    correct = pred.eq(y).<span class="built_in">sum</span>().<span class="built_in">float</span>().item()</span><br><span class="line">    total_correct += correct</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正确率：&#x27;</span> , total_correct/<span class="built_in">len</span>(test_loader.dataset))</span><br><span class="line">正确率： <span class="number">0.8903</span></span><br></pre></td></tr></table></figure>

<h1 id="8-查看测试集图片"><a href="#8-查看测试集图片" class="headerlink" title="8.查看测试集图片"></a>8.查看测试集图片</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x , y = <span class="built_in">next</span>(<span class="built_in">iter</span>(test_loader))</span><br><span class="line">plot_image(x , y , <span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>



<p><a href="https://i-blog.csdnimg.cn/blog_migrate/8a95ddc3b10a6536c7c117af272a35ec.png#pic_center" title="null" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/8a95ddc3b10a6536c7c117af272a35ec.png#pic_center" alt="null"></a></p>
<hr>
<hr>
<hr>
<h1 id="Util-py代码"><a href="#Util-py代码" class="headerlink" title="Util.py代码"></a>Util.py代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_image</span>(<span class="params">img, label, name</span>):</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">        plt.subplot(<span class="number">3</span>, <span class="number">3</span>, i + <span class="number">1</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.imshow(img[i][<span class="number">0</span>] * <span class="number">0.3081</span> + <span class="number">0.1307</span>, cmap=<span class="string">&#x27;gray&#x27;</span>, interpolation=<span class="string">&#x27;none&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>.<span class="built_in">format</span>(name, label[i].item()))</span><br><span class="line">        plt.xticks([])</span><br><span class="line">        plt.yticks([])</span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pd_one_hot</span>(<span class="params">y</span>):</span><br><span class="line">    y = y.reshape(-<span class="number">1</span> , <span class="number">1</span>)	</span><br><span class="line">    y = pd.Series(y)		<span class="comment"># 使用pandas的one-hot处理</span></span><br><span class="line">    y= y.astype(<span class="built_in">str</span>)</span><br><span class="line">    y = pd.get_dummies(y)</span><br><span class="line">    <span class="keyword">return</span> y.values</span><br></pre></td></tr></table></figure>

<hr>
<hr>
<hr>
<h1 id="正文代码汇总"><a href="#正文代码汇总" class="headerlink" title="正文代码汇总"></a>正文代码汇总</h1><p><strong>项目github链接:</strong> github.com&#x2F;2979083263&#x2F;mnist</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="keyword">from</span> torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> optim</span><br><span class="line"><span class="keyword">import</span> torchvision</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Util <span class="keyword">import</span> plot_curve,plot_image,one_hot,pd_one_hot</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">batch_size = <span class="number">512</span></span><br><span class="line"></span><br><span class="line">train_loader = torch.utils.data.DataLoader(</span><br><span class="line">    torchvision.datasets.MNIST(<span class="string">&#x27;mnist_data&#x27;</span></span><br><span class="line">                               , train=<span class="literal">True</span></span><br><span class="line">                               ,download=<span class="literal">True</span></span><br><span class="line">                               ,transform=torchvision.transforms.Compose([</span><br><span class="line">                                   torchvision.transforms.ToTensor()        <span class="comment">#矩阵转化为张量</span></span><br><span class="line">                                  ,torchvision.transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                               ])</span><br><span class="line">                              )</span><br><span class="line">    ,batch_size=batch_size</span><br><span class="line">    ,shuffle=<span class="literal">True</span>              <span class="comment"># 设置随机打散</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">test_loader = torch.utils.data.DataLoader(</span><br><span class="line">    torchvision.datasets.MNIST(<span class="string">&#x27;mnist_data&#x27;</span></span><br><span class="line">                               ,train=<span class="literal">False</span></span><br><span class="line">                               ,download=<span class="literal">True</span></span><br><span class="line">                               ,transform=torchvision.transforms.Compose([</span><br><span class="line">                                   torchvision.transforms.ToTensor()</span><br><span class="line">                                  ,torchvision.transforms.Normalize((<span class="number">0.1307</span>,), (<span class="number">0.3081</span>,))</span><br><span class="line">                               ])</span><br><span class="line">                              ),</span><br><span class="line">    batch_size=batch_size</span><br><span class="line">    ,shuffle=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">x, y = <span class="built_in">next</span>(<span class="built_in">iter</span>(train_loader))   <span class="comment">#暂时看作迭代</span></span><br><span class="line"><span class="built_in">print</span>(x.shape, y.shape, x.<span class="built_in">min</span>(), x.<span class="built_in">max</span>())</span><br><span class="line">plot_image(x, y, <span class="string">&#x27;image sample&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Net</span>(nn.Module):</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">super</span>(Net , <span class="variable language_">self</span>).__init__()</span><br><span class="line">        </span><br><span class="line">        <span class="variable language_">self</span>.fc1 = nn.Linear(<span class="number">28</span>*<span class="number">28</span> , <span class="number">256</span>)  <span class="comment">#输入和输出的维度</span></span><br><span class="line">        <span class="variable language_">self</span>.fc2 = nn.Linear(<span class="number">256</span> , <span class="number">64</span>)</span><br><span class="line">        <span class="variable language_">self</span>.fc3 = nn.Linear(<span class="number">64</span> , <span class="number">10</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">forward</span>(<span class="params">self , x</span>):</span><br><span class="line">        </span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc1(x))</span><br><span class="line">        x = F.relu(<span class="variable language_">self</span>.fc2(x))</span><br><span class="line">        x = <span class="variable language_">self</span>.fc3(x)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line">net = Net()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">optimizer = optim.SGD(net.parameters() , lr = <span class="number">0.01</span> , momentum= <span class="number">0.9</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loss_s = [ ]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> each <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">    <span class="keyword">for</span> location , (x,y) <span class="keyword">in</span> <span class="built_in">enumerate</span>(train_loader):</span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>) , <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">        out = net(x)</span><br><span class="line">        y_onehot = pd_one_hot(y)</span><br><span class="line">        </span><br><span class="line">        loss = F.mse_loss(out , torch.from_numpy(y_onehot).<span class="built_in">float</span>())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 清零梯度</span></span><br><span class="line">        optimizer.zero_grad()</span><br><span class="line">        <span class="comment"># 计算梯度</span></span><br><span class="line">        loss.backward()</span><br><span class="line">        <span class="comment"># 更新梯度</span></span><br><span class="line">        optimizer.step()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(location % <span class="number">5</span> == <span class="number">0</span>):</span><br><span class="line">            loss_s.append(loss.item())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;第&#x27;</span> , each+<span class="number">1</span> , <span class="string">&#x27;次迭代完成&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.plot(<span class="built_in">range</span>(<span class="built_in">len</span>(loss_s)) , loss_s , <span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 存储正确的数量</span></span><br><span class="line">total_correct = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x,y <span class="keyword">in</span> test_loader:</span><br><span class="line">    x  = x.view(x.size(<span class="number">0</span>), <span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">    out = net(x)</span><br><span class="line">    <span class="comment"># out: [b, 10] =&gt; pred: [b]</span></span><br><span class="line">    pred = out.argmax(dim=<span class="number">1</span>)</span><br><span class="line">    correct = pred.eq(y).<span class="built_in">sum</span>().<span class="built_in">float</span>().item()</span><br><span class="line">    total_correct += correct</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;正确率：&#x27;</span> , total_correct/<span class="built_in">len</span>(test_loader.dataset))</span><br><span class="line"></span><br><span class="line">x , y = <span class="built_in">next</span>(<span class="built_in">iter</span>(test_loader))</span><br><span class="line">plot_image(x , y , <span class="string">&#x27;test&#x27;</span>)</span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>pytorch基础</title>
    <url>/2021-02-26/pytorch%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p>持续补充</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br></pre></td></tr></table></figure>

<p>1.随机相关</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>,<span class="number">3</span>)		正态分布</span><br><span class="line"></span><br><span class="line">b = torch.rand(<span class="number">2</span>,<span class="number">3</span>)			<span class="number">0</span>~<span class="number">1</span>范围内随机</span><br><span class="line"></span><br><span class="line">c = torch.rand_like(a)		模仿a的形状生成随机矩阵</span><br><span class="line"></span><br><span class="line">d = torch.randint(<span class="number">1</span>,<span class="number">10</span>,[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])		在<span class="number">1</span>~<span class="number">10</span>内生成形状为（<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>）的矩阵</span><br><span class="line"></span><br><span class="line">a = a.cuda()				将数据加载到gpu内</span><br></pre></td></tr></table></figure>

<p>2.查看数据形状</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a.<span class="built_in">type</span>()			输出数据类型</span><br><span class="line"></span><br><span class="line">a.size() == a.shape		输出张量形状</span><br><span class="line"></span><br><span class="line">a.dim()				输出维度</span><br></pre></td></tr></table></figure>

<p>3.生成矩阵</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.full([<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>],<span class="number">6</span>)        （<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>）形状矩阵，用<span class="number">6</span>填满</span><br><span class="line">tensor([[[<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]],</span><br><span class="line"></span><br><span class="line">        [[<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>],</span><br><span class="line">         [<span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>, <span class="number">6.</span>]]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小写trnsor是自己传值，大写Tensor是传维度</span></span><br><span class="line"></span><br><span class="line">b = torch.tensor(<span class="number">4</span>)				<span class="number">4</span>为填充数据，<span class="number">0</span>维的常量</span><br><span class="line">c = torch.tensor([<span class="number">4</span>])			<span class="number">4</span>为填充数据，<span class="number">1</span>维的向量</span><br><span class="line">d = torch.tensor([[<span class="number">4</span>]])			<span class="number">4</span>为填充数据，<span class="number">2</span>维的矩阵</span><br><span class="line"></span><br><span class="line">e = torch.FloatTensor(<span class="number">2</span>,<span class="number">3</span>)		（<span class="number">2</span>,<span class="number">3</span>）为矩阵形状</span><br><span class="line"></span><br><span class="line">f = torch.empty(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)			原则上生成全为<span class="number">0</span>的(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)维度的矩阵，事实上是很多很大的值</span><br><span class="line"></span><br><span class="line">g = torch.eye(<span class="number">5</span>,<span class="number">5</span>)				对角线为<span class="number">1</span>的矩阵</span><br><span class="line">tensor([[<span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">0.</span>],</span><br><span class="line">        [<span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">0.</span>, <span class="number">1.</span>]])</span><br></pre></td></tr></table></figure>

<p>1. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.arange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">2</span>)		<span class="number">2</span>为步长</span><br><span class="line"></span><br><span class="line">torch.linspace(<span class="number">1</span>,<span class="number">10</span>,<span class="number">5</span>)		<span class="number">5</span>为数据个数</span><br></pre></td></tr></table></figure>

<p>5.切片</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">基本操作与numpy切片一样，只不过涉及图像处理后，矩阵维度为四维，刚开始接触不太好理解</span><br><span class="line"></span><br><span class="line">a = torch.randn(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line">a.shape</span><br><span class="line">    torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>].shape</span><br><span class="line">    torch.Size([<span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="number">0</span>,<span class="number">0</span>].shape</span><br><span class="line">    torch.Size([<span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line">    </span><br><span class="line">a[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>].shape</span><br><span class="line">    torch.Size([<span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[:<span class="number">2</span>].shape</span><br><span class="line">    torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[:<span class="number">2</span>,<span class="number">2</span>:].shape</span><br><span class="line">    torch.Size([<span class="number">2</span>, <span class="number">1</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[:,:,::<span class="number">2</span>,::<span class="number">2</span>].shape</span><br><span class="line">    torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">14</span>, <span class="number">14</span>])</span><br><span class="line"></span><br><span class="line">特殊：</span><br><span class="line"><span class="meta">... </span>代表最大维度</span><br><span class="line">a[...].shape</span><br><span class="line">    torch.Size([<span class="number">4</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[<span class="number">1</span>,...].shape</span><br><span class="line">    torch.Size([<span class="number">3</span>, <span class="number">28</span>, <span class="number">28</span>])</span><br><span class="line"></span><br><span class="line">a[:<span class="number">1</span>,...,::<span class="number">2</span>].shape		<span class="comment"># 当三个点在中间时，根据左右两边的数来确定...代表的维度</span></span><br><span class="line">    torch.Size([<span class="number">1</span>, <span class="number">3</span>, <span class="number">28</span>, <span class="number">14</span>])</span><br></pre></td></tr></table></figure>

<p>6.维度转换</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>打平</span><br><span class="line">    a.view(<span class="number">4</span>,<span class="number">3</span>*<span class="number">28</span>*<span class="number">28</span>)</span><br><span class="line">    将四维矩阵转化为<span class="number">4</span>行，<span class="number">3</span>*<span class="number">28</span>*<span class="number">28</span>列的二维矩阵，矩阵数据不能丢</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>增<span class="number">1</span>维</span><br><span class="line">    a.unsqueeze(<span class="number">0</span>)	<span class="number">0</span>为插入维度的位置，含义为在<span class="number">0</span>维之前再插入一个维度</span><br><span class="line">                    若写为-<span class="number">1</span>，则在-<span class="number">1</span>维之后再插入一个维度，正负有别</span><br><span class="line">    a的shape变为[<span class="number">1</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">28</span>,<span class="number">28</span>]</span><br><span class="line">    </span><br><span class="line"><span class="number">3.</span>降<span class="number">1</span>维</span><br><span class="line">    只能去掉dim为<span class="number">1</span>的维度</span><br><span class="line">    a.squeeze(<span class="number">0</span>)   此维度为<span class="number">1</span>的话可以删去，不然的话无效(不会报错)</span><br><span class="line">    </span><br><span class="line"><span class="number">4.</span>让<span class="number">1</span>维度扩展</span><br><span class="line">    expand:只扩展维度</span><br><span class="line">    a = torch.randn(<span class="number">1</span>,<span class="number">32</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    a.expand(<span class="number">5</span>,<span class="number">32</span>,<span class="number">5</span>,<span class="number">10</span>)			参数为需要转换的维度</span><br><span class="line"></span><br><span class="line">    repeat:会复制数据，不常用</span><br><span class="line">    a.repeat(<span class="number">5</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>)			参数为每个维度复制的次数</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>转置</span><br><span class="line">    a只能是二维矩阵</span><br><span class="line">    a.t()</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>拼接:cat(),stack()</span><br><span class="line">    c = torch.randn(<span class="number">4</span>,<span class="number">3</span>,<span class="number">7</span>,<span class="number">5</span>)</span><br><span class="line">    d = torch.randn(<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    torch.cat([c,d] , dim = <span class="number">1</span>).shape</span><br><span class="line">        &gt;&gt;&gt;torch.Size([<span class="number">4</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">5</span>])</span><br><span class="line">    torch.stack([c,c],dim=<span class="number">1</span>).shape</span><br><span class="line">        <span class="comment">#传入参数两者维度需相等，然后在dim参数前创建一个新维度</span></span><br><span class="line">        &gt;&gt;&gt;torch.Size([<span class="number">4</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>拆分：按比例split() ， 均分chunk()</span><br><span class="line">    w = torch.randn(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    split(步长/比例列表，dim = ？)</span><br><span class="line">    q1 , e1 = w.split(<span class="number">1</span>,dim=<span class="number">0</span>)</span><br><span class="line">        &gt;&gt;&gt;q1,e1.shape:[<span class="number">2</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">    q2 , e2 = w.split([<span class="number">3</span>,<span class="number">1</span>],dim=<span class="number">0</span>)</span><br><span class="line">        &gt;&gt;&gt;q2.shape:[<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">            e2.shape:[<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    w = torch.randn(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">    q1 , e1 , t1 , u1 = w.chunk(<span class="number">4</span>,dim=<span class="number">0</span>)	均分四分</span><br><span class="line">    q1 , e1 = w.chunk(<span class="number">4</span>,dim=<span class="number">0</span>)				均分两份</span><br><span class="line">        </span><br></pre></td></tr></table></figure>

<p>7.广播法则</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">特点</span><br><span class="line">    <span class="number">1.</span>只可以将一维数据扩展为多维</span><br><span class="line">    <span class="number">2.</span>如果两个矩阵维度不同的话就在低纬度处增加维度。</span><br><span class="line">        例如：a = torch.randn(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">              b = torch.randn(<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">              <span class="built_in">print</span>((a+b).shape)</span><br><span class="line">              	&gt;&gt;&gt;torch.Size([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">            扩充过程：[<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>]-&gt;[<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>]-&gt;[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">            只可以在前面补充维度，不可在其他位置，若两者高纬度数据不等，则不能广播</span><br></pre></td></tr></table></figure>

<p>8.加减乘除</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">可直接对矩阵进行加减乘除</span><br><span class="line"></span><br><span class="line">乘除是对相同位置上的元素进行乘除</span><br><span class="line">如需按照矩阵方法进行运算：<span class="number">1.</span>torch.mm() 二维矩阵的乘除</span><br><span class="line">                         <span class="number">2.</span>torch.matmul() 多维矩阵的乘除,多维矩阵相乘其实就是矩阵最高的两个维度相乘，其他维度不变</span><br><span class="line">                         	所以说相乘的两个矩阵要符合二维矩阵相乘的条件:前者列数等于后者行数</span><br><span class="line">                         	并且若其余低维不相等，还不符合广播的，则不能相乘</span><br><span class="line">                         <span class="number">3.</span>@ 第<span class="number">2</span>条的简写</span><br><span class="line"></span><br><span class="line">数据取小数和整数部分：.frac() , .trunc()</span><br></pre></td></tr></table></figure>

<p><a href="https://i-blog.csdnimg.cn/blog_migrate/fdc615111e8099d68ab6dc478b779925.png#pic_center" title="null" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/fdc615111e8099d68ab6dc478b779925.png#pic_center" alt="null"></a><br>9.属性统计</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = torch.randn(<span class="number">2</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">a.norm(<span class="built_in">int</span> x)  求范数，x代表求几级范数,也可dim指定维度</span><br><span class="line"></span><br><span class="line">下面的函数的返回值都是一维的，不论是否加dim，当加上dim后，还可再加keepdim=<span class="literal">True</span>这样可以使返回值的维度与数据集维度相同。</span><br><span class="line">a.<span class="built_in">min</span>()			返回两个tensor ， 返回最大值和其位置</span><br><span class="line">a.<span class="built_in">max</span>()		</span><br><span class="line">a.<span class="built_in">sum</span>()</span><br><span class="line">a.mean()	平均值</span><br><span class="line">a.prod()	累乘</span><br><span class="line">a.topk(<span class="built_in">int</span> num , dim= , largest = <span class="literal">True</span>/<span class="literal">False</span>)		返回前num个最大(小)的概率</span><br><span class="line">a.kthvalue(<span class="built_in">int</span> location , dim=)		返回第k小的概率的值和位置</span><br><span class="line"></span><br><span class="line">a.argmax()	求最大值的位置，dim指定维度，不指定的话会将a矩阵打平，求最大值位置</span><br><span class="line">a.argmin()	求最小值的位置</span><br><span class="line"></span><br><span class="line">torch.eq(a , b)			返回一个<span class="number">0</span>,<span class="number">1</span>矩阵</span><br><span class="line">torch.equal(a , b)		a和b完全相同时返回<span class="literal">True</span>，否则返回<span class="literal">False</span>。</span><br></pre></td></tr></table></figure>

<p>10.高阶操作</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">torch.where(condition , x , y) 返回值为tensor:</span><br><span class="line">    condition , x , y维度相同，且condition为<span class="number">0</span>,<span class="number">1</span>矩阵</span><br><span class="line">    如果condition内位置上为<span class="number">1</span>，则取x内的值，否则取y内的值，然后组成一个新tensor返回</span><br><span class="line"></span><br><span class="line">torch.gather(<span class="built_in">input</span> , dim , index , out=<span class="literal">None</span>):</span><br><span class="line">    <span class="built_in">input</span>:可以理解为标签</span><br><span class="line">    dim：维度</span><br><span class="line">    index：标签的坐标，然后以此返回个新的tensor</span><br><span class="line">    out=<span class="literal">None</span></span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>3D图像颜色</title>
    <url>/2018-08-21/3D%E5%9B%BE%E5%83%8F%E9%A2%9C%E8%89%B2/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p>viridis   翡翠色   #中文会慢慢给出，也会逐渐整理</p>
<h2 id="只有-‘-‘-内的代码才是颜色。"><a href="#只有-‘-‘-内的代码才是颜色。" class="headerlink" title="只有[ ‘  ‘]内的代码才是颜色。"></a>只有[ ‘  ‘]内的代码才是颜色。</h2><pre><code># # cmaps = [(&#39;Perceptually Uniform Sequential&#39;,
# #           [&#39;viridis&#39;, &#39;inferno&#39;, &#39;plasma&#39;, &#39;magma&#39;]),
# #          (&#39;Sequential&#39;, [&#39;Blues&#39;, &#39;BuGn&#39;, &#39;BuPu&#39;,
# #                          &#39;GnBu&#39;, &#39;Greens&#39;, &#39;Greys&#39;, &#39;Oranges&#39;, &#39;OrRd&#39;,
# #                          &#39;PuBu&#39;, &#39;PuBuGn&#39;, &#39;PuRd&#39;, &#39;Purples&#39;, &#39;RdPu&#39;,
# #                          &#39;Reds&#39;, &#39;YlGn&#39;, &#39;YlGnBu&#39;, &#39;YlOrBr&#39;, &#39;YlOrRd&#39;]),
# #          (&#39;Sequential (2)&#39;, [&#39;afmhot&#39;, &#39;autumn&#39;, &#39;bone&#39;, &#39;cool&#39;,
# #                              &#39;copper&#39;, &#39;gist_heat&#39;, &#39;gray&#39;, &#39;hot&#39;,
# #                              &#39;pink&#39;, &#39;spring&#39;, &#39;summer&#39;, &#39;winter&#39;]),
# #          (&#39;Diverging&#39;, [&#39;BrBG&#39;, &#39;bwr&#39;, &#39;coolwarm&#39;, &#39;PiYG&#39;, &#39;PRGn&#39;, &#39;PuOr&#39;,
# #                         &#39;RdBu&#39;, &#39;RdGy&#39;, &#39;RdYlBu&#39;, &#39;RdYlGn&#39;, &#39;Spectral&#39;,
# #                         &#39;seismic&#39;]),
# #          (&#39;Qualitative&#39;, [&#39;Accent&#39;, &#39;Dark2&#39;, &#39;Paired&#39;, &#39;Pastel1&#39;,
# #                           &#39;Pastel2&#39;, &#39;Set1&#39;, &#39;Set2&#39;, &#39;Set3&#39;]),
# #          (&#39;Miscellaneous&#39;, [&#39;gist_earth&#39;, &#39;terrain&#39;, &#39;ocean&#39;, &#39;gist_stern&#39;,
# #                             &#39;brg&#39;, &#39;CMRmap&#39;, &#39;cubehelix&#39;,
# #                             &#39;gnuplot&#39;, &#39;gnuplot2&#39;, &#39;gist_ncar&#39;,
# #                             &#39;nipy_spectral&#39;, &#39;jet&#39;, &#39;rainbow&#39;,
# #                             &#39;gist_rainbow&#39;, &#39;hsv&#39;, &#39;flag&#39;, &#39;prism&#39;])]
</code></pre>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python函数</title>
    <url>/2018-12-28/Python%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><blockquote>
<p>之前由于水平不足博客写的很不好，现于2019&#x2F;12&#x2F;17进行大更改。</p>
</blockquote>
<p><strong>1.内置函数</strong></p>
<p>①python与其他编程语言一样有许多内置函数，我们可以直接调用使用，只需要知道参数和函数名。内置函数有很多，需要的话自行百度了解</p>
<p>②利用内置函数进行数据类型转换，int，float…</p>
<p>③可以把函数名复制给一个变量，然后用这个变量也可以调用该函数。</p>
<blockquote>
<p>a&#x3D;abs 　　　#用a代替abs函数<br>a(-1)　　　　＃调用取绝对值函数　<br>１　　　　　＃产生结果与直接调用abs函数相同</p>
</blockquote>
<hr>
<p>&#x3D;&#x3D;<strong>2.用户自定函数</strong>&#x3D;&#x3D;</p>
<p>①用def语句定义函数，后面跟函数名，括号，括号里写参数名，还要加冒号。用return语句返回。没有return语句函数也可以，只不过返回值为none。</p>
<p>②python与c一样，也可以设置空函数，等到以后再补充内容，需要用pass语句。</p>
<blockquote>
<p>def  nop() :<br>　　pass</p>
</blockquote>
<p>③isinstance（a，int）检查a是否为整形，也可以检查其他的类型，只需要改变int就行，返回值为true或flase。
　　</p>
<blockquote>
<p>import　math<br>导入math包，允许后面调用math函数库内函数</p>
</blockquote>
<hr>
<p>&#x3D;&#x3D;<strong>函数的参数</strong>&#x3D;&#x3D;<br>函数参数分为：<strong>必选参数、默认参数、可变参数、命名关键字参数和关键字参数</strong>。五种参数可以混合使用，但$\color{red}{文字必须按照上面的顺序依次设置}$。否则出错。</p>
<p>一、必选参数（位置参数）：调用时必须写，还需要注意传入参数的顺序，不能乱序，不能省略，没有什么需要特别注意的地方。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#也可以使用点名传入法，指出传给某个参数什么值,此时可以不用在意顺序</span><br><span class="line"></span><br><span class="line">def pet (animal , pets ) :</span><br><span class="line">	print(&#x27;\n i have a &#x27; + animal + &#x27;.&#x27;)</span><br><span class="line">	print(&#x27;My&#x27; + animal + &quot; &#x27;s name is &quot; + pet.title() + &#x27;.&#x27;)</span><br><span class="line"></span><br><span class="line">#调用函数</span><br><span class="line">pet( pet = &#x27;hame&#x27; , animal = &#x27;harry&#x27;) </span><br></pre></td></tr></table></figure>
<hr>
<p>二、默认参数：在编写函数时赋予一个默认值。调用函数时如果输入新值则将新值代入函数，若未输入，则按默认值。<br>　　<br>默认参数有个很大的坑，总之记住一点：默认参数必须指向不变对象。因为不变对象一旦创建，对象内部的数据就不能修改。</p>
<hr>
<p>三、可变参数：只需要在参数前加上*即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def calc(*numbers) :	#创建的是numbers元组</span><br><span class="line">	sum = 0</span><br><span class="line">	for n in numbers:</span><br><span class="line"> 		sum = sum + n * n</span><br><span class="line">    return sum</span><br></pre></td></tr></table></figure>
<p>输入的数据个数无限制(也可以是零个)，任意的，直接调用：</p>
<blockquote>
<p>calc(1,2,3,4)</p>
</blockquote>
<p>如果已经有一个列表或元组，则可以：</p>
<blockquote>
<p>num&#x3D;[1,2,3]<br>calc(*num)</p>
</blockquote>
<p>直接将list或tuple中的元素传入函数。方便快捷</p>
<hr>
<p>四、关键字参数：</p>
<p>1.可变参数允许你传入0个或任意个参数，这些可变参数在函数调用时自动组装为一个tuple（元组）,<br>而关键字参数允许你传入0个或任意个含参数名的参数，这些关键字参数在函数内部自动组装为一个dict（字典）(传入的时候也必须传入键和值)</p>
<p>2.关键字参数需要用两个**开头，在关键字参数里可以随意输入其他参数，个数也无限制</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def person(name, age, **kw):</span><br><span class="line">    print(&#x27;name:&#x27;, name, &#x27;age:&#x27;, age, &#x27;other:&#x27;, kw)</span><br></pre></td></tr></table></figure>
<p>调用person函数（举例)<br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person(&#x27;Michael&#x27;, 30)</span><br><span class="line"></span><br><span class="line">name: Michael age: 30 other: &#123;　&#125;</span><br></pre></td></tr></table></figure><br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">person(&#x27;Adam&#x27;, 45, gender=&#x27;M&#x27;, job=&#x27;Engineer&#x27;)			#等号前面的东西不能加引号</span><br><span class="line"></span><br><span class="line">name: Adam age: 45 other: &#123;&#x27;gender&#x27;: &#x27;M&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;\</span><br></pre></td></tr></table></figure><br><strong>也可以先组装出一个dict，然后，把该dict转换为关键字参数传进去：</strong><br> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">extra = &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br><span class="line"></span><br><span class="line">person(&#x27;Jack&#x27;, 24, **extra)</span><br><span class="line"></span><br><span class="line">name: Jack age: 24 other: &#123;&#x27;city&#x27;: &#x27;Beijing&#x27;, &#x27;job&#x27;: &#x27;Engineer&#x27;&#125;</span><br></pre></td></tr></table></figure></p>
<hr>
<p>五、命名关键字参数：<br> &#x3D;&#x3D;作用&#x3D;&#x3D;：限制关键字参数的名字，用户不能随意输入参数。</p>
<blockquote>
<p>def person(name, age, *, city, job):<br>print(name, age, city, job)</p>
</blockquote>
<p>只接受city和job参数。其他参数不要<br>调用：</p>
<blockquote>
<p>person(‘Jack’, 24, city&#x3D;’Beijing’, job&#x3D;’Engineer’)<br>Jack 24 Beijing Engineer</p>
</blockquote>
<p>⑴如果前面已经有一个可变参数了，则后面的命名关键字参数就不在需要*修饰了</p>
<blockquote>
<p>def person(name, age, *args, city, job):<br>print(name, age, args, city, job)</p>
</blockquote>
<p>⑵调用命名关键字参数必须传入参数名</p>
<p>⑶命名关键字参数也可以设置默认值</p>
<hr>
<p><strong>小结</strong><br>1、五种参数必须按顺序来调用<br>2、使用*args和**kw是Python的习惯写法，当然也可以用其他参数名，但最好使用习惯用法。<br>3、虽然说五种参数能同时调用，但还是不要这样为好</p>
<hr>
<p>&#x3D;&#x3D;<strong>递归函数</strong>&#x3D;&#x3D;<br>含义：函数内部调用函数本身<br>例：计算阶乘：</p>
<blockquote>
<p>def fact(n):<br>if n&#x3D;&#x3D;1:<br> 　　return 1<br>return n * fact(n - 1)</p>
</blockquote>
<p>标准的递归函数，但是数值不能过大，过大可能会溢出。</p>
<hr>
<h2 id="函数存储"><a href="#函数存储" class="headerlink" title="函数存储"></a>函数存储</h2><p>两个文件在同一个目录下的话，就可以在一个文件内导入另一个文件的函数，做法与以前导入其它模块一样，没什么特殊的，那些操作也都可以用。</p>
<p>作用：隐藏代码细节</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python基础</title>
    <url>/2018-12-15/Python%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote>
<p>之前由于水平不足博客写的很不好，现于2019&#x2F;11&#x2F;30进行大更改。</p>
</blockquote>
<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><p><strong>1.基础</strong><br>①代码中单引号与双引号效果一样，不像其他语言一样有所区别，但是要成对使用，不能落单。<br>　　<br>②命名可以用数字，字母，下划线，汉字，不能以数字开头。注意不要和关键字重名。<br>　　<br>③字符串：每个元素的位置可以正着数，也可以倒着数。正着数从0开始，倒着从-1开始。<br> 字符串访问区间方式：[m,n],访问从m开始到n的字符串内元素（不包括n，左闭右开）    m，n可以是正着数的，也可以是倒着数的，还可以混合用。<br>　　<br>④交换x，y的值：x，y&#x3D;y，x（比c简单多了）<br> 　　<br>⑤#后面跟的是注释，大程序中注释很重要，便于自己和别人的理解。<br>　　<br>⑥为了简化避免造成机器误解，Python还允许用 r’ ‘表示 ‘ ‘ 内部的字符串默认不转义，可以自己试试：<br>　　（1）输入：&gt;&gt;&gt; print( ‘ \\\t\\ ‘)<br>　　　　　输出：\    　　  \<br>　　（2）输入：&gt;&gt;&gt; print ( r ‘ \\\t\\‘)<br>　　　　　输出：\\\t\\</p>
<hr>
<p><strong>2.输出</strong>  print() 函数，<em>输出的是字符串</em><br> 	⑴可以直接输出，可以输入计算表达式，输出结果。<br> 	⑵也可以输出多个字符串，用逗号隔开，输出时逗号变为空格<br> 	(3)默认调用结束后输出一个\n，可以加一个end &#x3D; ‘ ‘,使其不输出换行符。<br> 	<strong>(3)format函数:</strong></p>
<table>
<thead>
<tr>
<th>:</th>
<th>&lt;填充&gt;</th>
<th>&lt;对齐&gt;</th>
<th>&lt;宽度&gt;</th>
<th>&lt;，&gt;</th>
<th>&lt;精度&gt;</th>
<th>&lt;类型&gt;</th>
</tr>
</thead>
<tbody><tr>
<td>引导符号</td>
<td>用于填充的单个字符</td>
<td>&lt;左对齐，&gt;右对齐，^居中</td>
<td>槽的设定输出宽度</td>
<td>数字的千位分隔符适用于整数和浮点数</td>
<td>浮点数小数部分的精度或字符串的最大输出长度</td>
<td>整数类型b,c,d,o,x,X浮点数类型e,E,%f</td>
</tr>
<tr>
<td>例：”{}:计算机{}的CPU占用率为{}%。”.format(“2016-131”,”PYTHON”,”10”)</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>也可以在大括号里加数字，可以改变参数要填入的位置。</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<hr>
<p> <strong>3.输入</strong> input（）<br>①直接输入：input（），不论输入什么，python都会自动将其转&#x3D;&#x3D;换为字符串&#x3D;&#x3D;，需要根据实际需要再转换类型。<br>　　<br>②input（‘please input：’） 虽然是输入函数但是屏幕上还是可以显示please input：       显示的东西要用引号括起来</p>
<hr>
<h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><p>  1.整数：顾名思义，包括正整数、负整数<br>  浮点数：小数或用科学计数法表示的数<br> 字符串：  str  ‘字符串’</p>
<p>  2.除法：a&#x2F;b，得结果为浮点数，即使能整除，结果也是浮点数。<br>   a&#x2F;&#x2F;b（地板除），结果为整数，不四舍五入，<strong>只取整数部分</strong>。</p>
<p>   3.’%‘求余，返回值为余数。</p>
<p>   4.与运算and<br>    或运算or<br>   非运算not</p>
<hr>
<p>   ps：Python中的空值用none表示，但none不等于0，0是有意义的，none就是一个特殊的空值</p>
<hr>
<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>   &#x3D;&#x3D;str（）&#x3D;&#x3D;（此函数可以将其它类型的东西，转化为字符串）<br> 1.ord（）函数用于获取字符的阿斯克码<br>  chr（）是将阿斯克码变为对应的字符</p>
<p>2.len（）计算字符串长度<br>补充：</p>
<blockquote>
<p>.title() #首字母变为大写，其它部位字母小写<br>.upper() #全部转换为大写<br>.loewr() #全部转换为小写</p>
</blockquote>
<p>3.合并字符串的话，直接用+连接两个字符串就好。</p>
<p>4.字符串的复制：a &#x3D; b,此时a和b是指向同一个地址的，改变a的值，b也会变。<br>a &#x3D; b [ : ],此时a和b互不相同，分别指向两个地址。</p>
<p>5.输出时删除字符串尾内的空白：.rstrip()<br> 输出时删除头部空白：.lstrip()<br> 输出时删除全部空白：.strip()</p>
<blockquote>
<p>格式化:</p>
<blockquote>
<p>%d 　　整数<br>％ｆ　　浮点数<br>％ｓ　　字符串<br>％ｘ　　十六进制</p>
</blockquote>
</blockquote>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>１. list[]中还可以嵌套list[]构成二维数组</p>
<p> <em>2.ord（）函数用于获取字符的阿斯克码<br>   chr（）是将阿斯克码变为对应的字符（与字符串一样）</em></p>
<p>   3.可以使用&#x3D;&#x3D;list()函数&#x3D;&#x3D;将元组或字符串转化为列表。</p>
<p>   4.用for循环对列表进行遍历（输出各个元素值）<br>   倒着输出列表：a.reverse(){用a[ : : -1]也可}</p>
<p>   5.如果将列表传入函数的话，相当于传入了地址，函数内对列表的改变是永久性的。<br>   要想不改变列表内的值，可以传入列表的副本：list [ : ] , 但是呢会占用时间，所以说能不这样尽量别这样。</p>
<p>   6.增：</p>
<blockquote>
<p>追加元素到末尾：列表名.append(‘ ‘)，直接加*到列表末尾<br>追加元素到任意位置：列表名.insert（1, ‘ ‘）插取与一号元素位置</p>
</blockquote>
<p>删：</p>
<blockquote>
<p>删除末尾元素：列表名.pop（ ）删除列表最后一个元素。<br>删除指定位置的元素：列表名.pop（1）删除一号元素<br><em>pop删除后，会将删除的值返回，可以用一个变量接收删除的值，供接下来使用</em><br>列表名.remove(‘ ‘),删除括号内的元素，如果列表内有多个这个元素，则删除第一个。</p>
</blockquote>
<p> 改：</p>
<blockquote>
<p>直接赋值给索引位置<br>列表名[2]&#x3D;’lcy’ ,将列表中二号元素换为lcy</p>
</blockquote>
<p> 排序：</p>
<blockquote>
<p>a.sort(),对列表进行永久的排序（从小到大）（括号内写入True，则按从大到小排序）<br>sorted(a),临时排序，不改变a本来的结构。此函数不仅仅适用于列表。</p>
</blockquote>
<hr>
<h2 id="元组"><a href="#元组" class="headerlink" title="元组"></a>元组</h2><p> &#x3D;&#x3D;<strong>tuple（）</strong>&#x3D;&#x3D;<br> &#x3D;&#x3D;与列表类似，但是初始化后不能更改&#x3D;&#x3D;<br> 正是应为其不能更改，所以说安全性非常可靠，比list（）安全。<br> 　　1.有时需要定义只有一个元素的tuple（），例<em>t&#x3D;（1）</em>，这是不正确的，会产生歧义，改：t&#x3D;（1，）。</p>
<p>．　 2.虽然说元组中的元素不可变，但是元组中也可以包含列表，列表可变，于是说，元组也可以近似看为可变。</p>
<p>3.正是应为元组不可变，所以说是简单的一种数据结构，在创建那些数值不会变的元素时，可以用元组。减少其对内存的占用。</p>
<p>4,利用+，可以吧多个元组合成一个。</p>
<p>5.元组名.count(值)，统计这个值在元组内出现次数。list也能用。</p>
<hr>
<hr>
<h2 id="三大结构"><a href="#三大结构" class="headerlink" title="三大结构"></a>三大结构</h2><p><strong>顺序结构</strong><br><em>无知识点，前面已经提过</em><br>break语句：跳出循环<br>continue语句：结束此次循环，开始下次循环</p>
<hr>
<p><strong>判断结构</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">age=3</span><br><span class="line">if age&gt;=18:</span><br><span class="line">	print(&#x27;your age is:&#x27;,age)</span><br><span class="line">	print(&#x27;adult&#x27;)</span><br><span class="line">else:</span><br><span class="line">	print(&#x27;your age is&#x27;,age)</span><br><span class="line">	print(&#x27;teenager&#x27;)</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;<strong>注意了：不要忘写冒号</strong>&#x3D;&#x3D;</p>
<p>ps：elif&#x3D;else if，且elif语句后也要加冒号</p>
<p>1.inpute（）【输入函数】输入的返回值是字符串，有时候需要换数据类型，</p>
<p>2.关键字in：判断一个字符(串),是否在字符串或者列表内,同理not in作用相反。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a = &#x27;abcdef&#x27;</span><br><span class="line">b=&#x27;ab&#x27;</span><br><span class="line">print(b in a)</span><br><span class="line">&gt;&gt;&gt;True</span><br><span class="line">a = [&#x27;asd&#x27;,&#x27;qwe&#x27;,&#x27;zxc&#x27;]</span><br><span class="line">b = &#x27;asd&#x27;</span><br><span class="line">print(b in a)</span><br><span class="line">&gt;&gt;&gt;True</span><br></pre></td></tr></table></figure>
<p>3.空列表，空字符代表false</p>
<hr>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>  &#x3D;&#x3D;for循环&#x3D;&#x3D;<br>  代码：（for…in…）注意缩进<br>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sum=0</span><br><span class="line">for x in [1,2,3,4,5,6,7,8,9,10]:</span><br><span class="line">　　sum=sum+x</span><br><span class="line">print(sum)</span><br></pre></td></tr></table></figure><br>for i in …<br>in后面的可以是range()函数，也可以是一个字符串，列表，字典…等各种东西,此时 i 代表 in 后面的各个元素<br>&#x3D;&#x3D;while循环&#x3D;&#x3D;(不达到结果可以无限循环)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#求1~100内的奇数的和</span><br><span class="line">　　sum=0</span><br><span class="line">　　n=99</span><br><span class="line">　　while n&gt;0:</span><br><span class="line">　　　　　sum=sum+n</span><br><span class="line">　　　　　n=n-2</span><br><span class="line">　　print(sum)</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#删除列表内特定的元素</span><br><span class="line">	pets = [ &#x27;dog&#x27; , &#x27;cat&#x27; , &#x27;goldfish&#x27; , &#x27;cat&#x27; , &#x27;rabbit&#x27; , &#x27;cat&#x27; ]</span><br><span class="line">	print(pits)</span><br><span class="line">	while &#x27;cat&#x27; in pets:</span><br><span class="line">		pet.remove(&#x27;cat&#x27;)</span><br><span class="line">	print(pits)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>（&#x3D;&#x3D;dict&#x3D;&#x3D;  ，key-value）存储就像查询成绩一样，名字对应成绩</p>
<blockquote>
<p>sduent &#x3D; { ‘lu’:20 , ‘lc’:30 , ‘ly’:40 }</p>
</blockquote>
<p>1.增：</p>
<blockquote>
<p>stuent[‘lk’] &#x3D; 0</p>
</blockquote>
<p>2.删：</p>
<blockquote>
<p>del sduent[‘lu’] #删除字典内的这个键值对。<br>sduent.pop(‘lu’) #与列表删除类似，返回值为该键对应的值。</p>
</blockquote>
<p>3.改：</p>
<blockquote>
<p>sduent[‘lc’] &#x3D; 100</p>
<p>4.查：<br>sduent[‘ly’]</p>
</blockquote>
<p>5.字典内的元素是没有顺序的</p>
<p>6.创建空字典：</p>
<blockquote>
<p>a&#x3D; { }</p>
</blockquote>
<p>7.遍历字典：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#输出字典所有信息:</span><br><span class="line">for k , v in sduent.items():</span><br><span class="line">	print(&#x27;键为：&#x27; + k)</span><br><span class="line">	print(&#x27;值为：&#x27; + v)</span><br><span class="line"></span><br><span class="line">#仅输出键</span><br><span class="line">for k in sduent.keys():</span><br><span class="line">	print(&#x27;键为：&#x27; + k)</span><br><span class="line"></span><br><span class="line">#仅输出值</span><br><span class="line">for v in sduent.values():</span><br><span class="line">	print(&#x27;值为:&#x27; + v)</span><br></pre></td></tr></table></figure>

<p>8.嵌套：仅仅一个字典结果能办的事情有点少，使用嵌套的话就会强大很多：<br>(1).将字典名存到一个列表内，构成字典列表。<br>(2).字典内嵌套列表，即字典内的值可以用一个列表代替，增大储存元素。<br>(3).字典内储存字典：类似于二维数组，内层的字典名当键，字典内容当值</p>
<hr>
<h2 id="集合类型"><a href="#集合类型" class="headerlink" title="集合类型"></a>集合类型</h2><p>&#x3D;&#x3D;set&#x3D;&#x3D;　<br>　　set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。即使有，也不会被输出。set中只能存储固定数据类型，不能有可变数据类型。<br>1.set中的元素都是无序的，每次输出的顺序可能都不一样。<br> 2.add()增加元素<br> 3.remove（）除去元素</p>
<p>  　 <strong>set函数可用于生成集合，输入的参数可以是任何组合数据类型，返回结果是一个无重复且排序任意的集合</strong></p>
<blockquote>
<p>w&#x3D;set(“apple”)<br>{‘e’,’p’,’a’,’l’}</p>
</blockquote>
<blockquote>
<p>V&#x3D;set((“cat”,”dog”,”tiger”,”human”))<br>{‘cat’, ‘dog’, ‘tiger’, ‘human’}</p>
</blockquote>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>logistic回归</title>
    <url>/2019-07-24/logistic%E5%9B%9E%E5%BD%92/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="总结一小下"><a href="#总结一小下" class="headerlink" title="总结一小下"></a>总结一小下</h2><p>1.logistic回归为二分类问题，所以说y值只有1和0。</p>
<p>2.sigmod函数方程式：g (θ) &#x3D;  $\frac{1}{1+e^-θTx }$</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">f = np.matmul(x, weights.T)       #  f为直线，所以说当f&gt;0时，g(θ）为1，反之为0。</span><br><span class="line">g(θ)=1, np.add(1, np.exp(-f))</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3.代价函数：J &#x3D; - $\frac{1}{m}$$\sum_{i&#x3D;1}^m$ (y log [g(θ)] )+(1-y)  (log[1-g(θ)])<br>代码表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">loss_1 = -np.matmul(y.T, np.log(h))</span><br><span class="line">loss_0 = -np.matmul(np.add(1, -y).T, np.log(np.add(1, -h)))</span><br><span class="line">J= np.divide( loss_0+ loss_1 ,m)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.梯度下降：θ（j）-&#x3D; α｛$\frac{1}{m}$ $\sum_{i&#x3D;1}^m$（g(θ) x^i^-y^i^｝$x_j^i$<br>代码表示：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">θ -= np.divide(np.multiply(α, np.matmul(np.add(-y, np.matmul(g(θ)，x)).T, x)), m)  </span><br><span class="line">#可以分开变为五行。</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>5.基本上就这三个公式，具体梯度下降何时停止，参照线性回归。</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构:图(C语言)</title>
    <url>/2019-12-12/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E5%9B%BE-C%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote>
<p>实现图的创建，广度，深度遍历，拓扑排序。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MAXQSIZE 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MVNum 50</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> <span class="keyword">error</span> MVNum+10</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OVERFLOW 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> Status;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null -1</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdlib.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;string.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">arcnode</span>&#123;</span><br><span class="line">	<span class="type">int</span> adjvex;</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">arcnode</span> *nextatc;</span><br><span class="line">&#125;arcnode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">vnode</span>&#123;</span><br><span class="line">	<span class="type">int</span> data;</span><br><span class="line">	arcnode *firstarc;</span><br><span class="line">&#125;vnode,adjlist[MVNum];</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">	adjlist vertices;	  <span class="comment">//特殊数组</span></span><br><span class="line">	<span class="type">int</span> vexnum,arcnum;   <span class="comment">//顶点数，边数</span></span><br><span class="line">&#125;algraph;</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环队列定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">int</span> *base;</span><br><span class="line">			<span class="type">int</span> front;</span><br><span class="line">		<span class="type">int</span> rear;</span><br><span class="line"> 	&#125; 	SqQueue;</span><br><span class="line"><span class="comment">//循环队列的初始化</span></span><br><span class="line"><span class="function">Status <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		Q.base=<span class="keyword">new</span> <span class="type">int</span>[MAXQSIZE];</span><br><span class="line">		<span class="keyword">if</span>(!Q.base)</span><br><span class="line">			<span class="keyword">return</span>(OVERFLOW);</span><br><span class="line">		Q.front=Q.rear=<span class="number">0</span>;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line"> 	&#125; </span><br><span class="line"> <span class="comment">//入队</span></span><br><span class="line"> <span class="function">Status <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function"> 	</span>&#123;</span><br><span class="line"> 		<span class="keyword">if</span>((Q.rear<span class="number">+1</span>)%MAXQSIZE==Q.front)</span><br><span class="line"> 			<span class="keyword">return</span> ERROR;</span><br><span class="line"> 		Q.base[Q.rear]=e;</span><br><span class="line"> 		Q.rear=(Q.rear<span class="number">+1</span>)%MAXQSIZE;</span><br><span class="line"> 		<span class="keyword">return</span> OK;</span><br><span class="line"> 	 &#125; </span><br><span class="line"> <span class="comment">//出队</span></span><br><span class="line"> <span class="function">Status <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,<span class="type">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function">	 </span>&#123;</span><br><span class="line"> 		<span class="keyword">if</span>(Q.front==Q.rear) </span><br><span class="line">			<span class="keyword">return</span> ERROR;</span><br><span class="line"> 		e=Q.base[Q.front];</span><br><span class="line"> 		Q.front=(Q.front<span class="number">+1</span>)%MAXQSIZE;</span><br><span class="line"> 		<span class="keyword">return</span> OK;</span><br><span class="line">  	&#125; </span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="type">int</span> <span class="title">pankong</span><span class="params">(SqQueue Q)</span></span></span><br><span class="line"><span class="function">  	</span>&#123;</span><br><span class="line">  		<span class="keyword">if</span>(Q.front==Q.rear) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  	 &#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">//栈的定义 （实数栈）</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">StackNode1</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="type">float</span> data;</span><br><span class="line">		<span class="keyword">struct</span> <span class="title class_">StackNode1</span> *next;</span><br><span class="line">	&#125;StackNode1,*LinkStack1;</span><br><span class="line"><span class="comment">//栈的初始化 （实数栈）</span></span><br><span class="line"><span class="function">Status <span class="title">InitStack1</span><span class="params">(LinkStack1 &amp;S)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		S=<span class="literal">NULL</span>;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125; </span><br><span class="line"><span class="comment">//判断栈是否为空（实数栈）</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">StackEmpty1</span><span class="params">(LinkStack1 S)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(S==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	 &#125; </span><br><span class="line"><span class="comment">//入栈 （实数栈）</span></span><br><span class="line"><span class="function">Status <span class="title">Push1</span><span class="params">(LinkStack1 &amp;S,<span class="type">int</span> e)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		LinkStack1 p;</span><br><span class="line">    	p=(LinkStack1)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(StackNode1));</span><br><span class="line">		p-&gt;data=e;</span><br><span class="line">		p-&gt;next=S;</span><br><span class="line">		S=p;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line"><span class="comment">//出栈 （实数栈）</span></span><br><span class="line"><span class="function">Status <span class="title">Pop1</span><span class="params">(LinkStack1 &amp;S,<span class="type">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		LinkStack1 p;</span><br><span class="line">		<span class="keyword">if</span>(S==<span class="literal">NULL</span>) <span class="keyword">return</span> ERROR;</span><br><span class="line">		e=S-&gt;data;</span><br><span class="line">		p=S;</span><br><span class="line">		S=S-&gt;next;</span><br><span class="line">		<span class="keyword">delete</span> p;</span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//找出节点位置</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">location</span><span class="params">(algraph g,<span class="type">int</span> h)</span></span>&#123;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;g.vexnum ;i++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(g.vertices[i].data ==h)</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个邻接表</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">createudg</span><span class="params">(algraph *g,algraph *s)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ww[MVNum];</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入顶点个数：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;g-&gt;vexnum);</span><br><span class="line">	s-&gt;vexnum = g-&gt;vexnum ;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入边数：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;g-&gt;arcnum);</span><br><span class="line">	s-&gt;arcnum = g-&gt;arcnum ;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入%d个顶点的值：\n&quot;</span>,g-&gt;vexnum);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;g-&gt;vexnum;i++)&#123;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ww[i]);&#125;</span><br><span class="line"></span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt; g-&gt;vexnum ; i++)&#123;</span><br><span class="line">		g-&gt;vertices[i].data = ww[i];</span><br><span class="line">		s-&gt;vertices[i].data = ww[i];</span><br><span class="line">		g-&gt;vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line">		s-&gt;vertices[i].firstarc = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入各个边的两点值：\n&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span> ; i &lt; g-&gt;arcnum ; i++)&#123;</span><br><span class="line">		<span class="type">int</span> j,k;</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;j);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">		<span class="type">int</span> w = <span class="built_in">location</span>(*g,j);</span><br><span class="line">		<span class="type">int</span> m = <span class="built_in">location</span>(*g,k);</span><br><span class="line">		<span class="comment">//printf(&quot;%d,%d&quot;,w,m);</span></span><br><span class="line">		arcnode *p1 = <span class="keyword">new</span> arcnode;</span><br><span class="line">		p1-&gt;adjvex = m;</span><br><span class="line">		p1-&gt;nextatc = g-&gt;vertices[w].firstarc;</span><br><span class="line">		g-&gt;vertices[w].firstarc = p1;</span><br><span class="line"></span><br><span class="line">		arcnode *p2 = <span class="keyword">new</span> arcnode;</span><br><span class="line">		p2-&gt;adjvex = w;</span><br><span class="line">		p2-&gt;nextatc = s-&gt;vertices[m].firstarc;</span><br><span class="line">		s-&gt;vertices[m].firstarc = p2;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;邻接表,逆邻接表创建成功。\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//深度优先搜索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">dfs_al</span><span class="params">(algraph g,<span class="type">int</span> v,<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">	a[v] = <span class="number">1</span>;</span><br><span class="line">	arcnode *p1;</span><br><span class="line">	p1 = g.vertices[v].firstarc;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,g.vertices[v].data);</span><br><span class="line">	<span class="keyword">while</span>(p1!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		<span class="type">int</span> w = p1-&gt;adjvex;</span><br><span class="line">		<span class="keyword">if</span>(!a[w])</span><br><span class="line">			<span class="built_in">dfs_al</span>(g,w,a);</span><br><span class="line">		p1= p1-&gt;nextatc;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回下一个元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">firstadj</span><span class="params">(algraph g,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> h;</span><br><span class="line">	arcnode *p1 = <span class="keyword">new</span> arcnode;</span><br><span class="line">	p1 = g.vertices[v].firstarc;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">if</span>(p1==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	h = p1-&gt;adjvex;</span><br><span class="line">	<span class="keyword">return</span> h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回下下一个</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">nextadj</span><span class="params">(algraph g,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">	arcnode *p1 = <span class="keyword">new</span> arcnode;</span><br><span class="line">	arcnode *p2 = <span class="keyword">new</span> arcnode;</span><br><span class="line">	p1 = g.vertices[v].firstarc;</span><br><span class="line">	<span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;nextatc==<span class="literal">NULL</span>)</span><br><span class="line">			<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">		p2=p1-&gt;nextatc;</span><br><span class="line">		<span class="keyword">if</span>(p1-&gt;adjvex == w)</span><br><span class="line">			<span class="keyword">return</span> p2-&gt;adjvex;</span><br><span class="line">		p1=p2;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//广度优先搜索</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">bfs_al</span><span class="params">(algraph g,<span class="type">int</span> v,<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line">	SqQueue S4;</span><br><span class="line">	<span class="type">int</span> u,w;</span><br><span class="line">	<span class="built_in">InitQueue</span> (S4);</span><br><span class="line">	a[v] = <span class="number">1</span>;</span><br><span class="line">	<span class="built_in">EnQueue</span>(S4,v);</span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">pankong</span>(S4))&#123;</span><br><span class="line">		<span class="built_in">DeQueue</span>(S4,u);</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,g.vertices[u].data);</span><br><span class="line">		<span class="keyword">for</span>(w=<span class="built_in">firstadj</span>(g,u);w&gt;=<span class="number">0</span>;w=<span class="built_in">nextadj</span>(g,u,w))&#123;</span><br><span class="line">			<span class="keyword">if</span>(!a[w])&#123;</span><br><span class="line">				a[w] = <span class="number">1</span>;</span><br><span class="line">				<span class="built_in">EnQueue</span>(S4,w);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//确定度数</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">findindeggre</span><span class="params">(algraph g,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> ww=<span class="number">0</span>;</span><br><span class="line">	arcnode *p = <span class="keyword">new</span> arcnode;</span><br><span class="line">	p=g.vertices[v].firstarc;</span><br><span class="line">	<span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">		<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">		p=p-&gt;nextatc;</span><br><span class="line">		ww++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ww;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拓扑排序</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">topolog</span><span class="params">(algraph g,algraph s,<span class="type">int</span> a[])</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> indegree[MVNum],u,k;</span><br><span class="line">	arcnode *p = <span class="keyword">new</span> arcnode;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;g.vexnum;i++)</span><br><span class="line">		indegree[i]=<span class="built_in">findindeggre</span>(s,i);</span><br><span class="line"></span><br><span class="line">	LinkStack1 S;</span><br><span class="line">	<span class="built_in">InitStack1</span>(S);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;g.vexnum ;i++)</span><br><span class="line">		<span class="keyword">if</span>(!indegree[i])</span><br><span class="line">			<span class="built_in">Push1</span>(S,i);</span><br><span class="line">	<span class="type">int</span> m=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span>(!<span class="built_in">StackEmpty1</span>(S))&#123;</span><br><span class="line">		<span class="built_in">Pop1</span>(S,u);</span><br><span class="line">		a[m]=u;</span><br><span class="line">		++m;</span><br><span class="line">		p=g.vertices[u].firstarc;</span><br><span class="line">		<span class="keyword">while</span>(p!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">			k=p-&gt;adjvex;</span><br><span class="line">			--indegree[k];</span><br><span class="line">			<span class="keyword">if</span>(indegree[k]==<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">Push1</span>(S,k);</span><br><span class="line">			p=p-&gt;nextatc;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(m&lt;g.vexnum)</span><br><span class="line">		<span class="keyword">return</span> ERROR;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="keyword">return</span> OK;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> v;</span><br><span class="line">	<span class="type">int</span> visited[MVNum],top[MVNum];</span><br><span class="line">	algraph G,SS;</span><br><span class="line">	<span class="built_in">createudg</span>(&amp;G,&amp;SS);</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n请输入从第几个顶点开始遍历：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;v);</span><br><span class="line">	v-=<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">		visited[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;深度优先遍历为:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">dfs_al</span>(G,v,visited);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;G.vexnum;i++)</span><br><span class="line">		visited[i]=<span class="number">0</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n广度优先遍历为:\n&quot;</span>);</span><br><span class="line">	<span class="built_in">bfs_al</span>(G,v,visited);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n拓扑排序后顺序为：\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> c=<span class="built_in">topolog</span>(G,SS,top);</span><br><span class="line">	<span class="keyword">if</span>(c==<span class="number">0</span>)</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;图中有回路存在\n&quot;</span>);</span><br><span class="line">	<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;G.vexnum ;i++)&#123;</span><br><span class="line">			<span class="type">int</span> lc,ly;</span><br><span class="line">			lc=top[i];</span><br><span class="line">			ly=G.vertices[lc].data;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%d\t&quot;</span>,ly);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构:顺序表(c语言)</title>
    <url>/2019-10-26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%A1%BA%E5%BA%8F%E8%A1%A8-c%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="由于C语言对与语句缩进要求不严格，所以说缩进不标准。"><a href="#由于C语言对与语句缩进要求不严格，所以说缩进不标准。" class="headerlink" title="由于C语言对与语句缩进要求不严格，所以说缩进不标准。"></a>由于C语言对与语句缩进要求不严格，所以说缩进不标准。</h2><h1 id="如有疑问可以在评论区留言，共同交流。"><a href="#如有疑问可以在评论区留言，共同交流。" class="headerlink" title="如有疑问可以在评论区留言，共同交流。"></a>如有疑问可以在评论区留言，共同交流。</h1><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> maxsize 100</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OK 1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ERROR 0</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> elemtype;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//创建结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">elemtype *elem;</span><br><span class="line"><span class="type">int</span> length; </span><br><span class="line">&#125;sqlist;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新线性表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">intlist</span><span class="params">(sqlist &amp;L)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> L.elem = <span class="keyword">new</span> elemtype[maxsize];</span><br><span class="line"> <span class="keyword">if</span> (!L.elem)</span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> L.length=<span class="number">0</span>;</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listinsert</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,elemtype e)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>((i&lt;<span class="number">1</span>)||(i&gt;L.length<span class="number">+1</span>)) </span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> <span class="keyword">if</span>(L.length==maxsize) </span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line"> L.elem[j<span class="number">+1</span>]=L.elem[j];</span><br><span class="line"> L.elem[i<span class="number">-1</span>]=e;</span><br><span class="line"> ++L.length;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;插入结束\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//la，lb,lc插入</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listinsert1</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,elemtype e)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> <span class="keyword">if</span>((i&lt;<span class="number">1</span>)||(i&gt;L.length<span class="number">+1</span>)) </span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> <span class="keyword">if</span>(L.length==maxsize) </span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> j=L.length<span class="number">-1</span>;j&gt;=i<span class="number">-1</span>;j--)</span><br><span class="line"> L.elem[j<span class="number">+1</span>]=L.elem[j];</span><br><span class="line"> L.elem[i<span class="number">-1</span>]=e;</span><br><span class="line"> ++L.length;</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//取值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">getrlme</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,elemtype &amp;e)</span></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length) </span><br><span class="line"> <span class="keyword">return</span> ERROR;</span><br><span class="line"> e=L.elem[i<span class="number">-1</span>];</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;取值成功\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">locatelem</span><span class="params">(sqlist L,elemtype e)</span></span></span><br><span class="line"><span class="function"> </span>&#123;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line"> <span class="keyword">if</span>(L.elem[i]==e) <span class="keyword">return</span> i<span class="number">+1</span>;</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">listdelete</span><span class="params">(sqlist &amp;L,<span class="type">int</span> i,elemtype &amp;e)</span></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="keyword">if</span>(i&lt;<span class="number">1</span>||i&gt;L.length) </span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;删除错误&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> ERROR;&#125;</span><br><span class="line"> e=L.elem[i<span class="number">-1</span>];</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> j=i;j&lt;=L.length<span class="number">-1</span>;j++)</span><br><span class="line">  L.elem[j<span class="number">-1</span>]=L.elem[j];</span><br><span class="line"> --L.length;</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显示顺序表</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">appear</span><span class="params">(sqlist L)</span></span></span><br><span class="line"><span class="function"> </span>&#123; </span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,L.elem[i]);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n显示结束\n&quot;</span>);</span><br><span class="line"> <span class="keyword">return</span> OK;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建la，lb，合成lc</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">MergeList</span><span class="params">(sqlist la, sqlist lb, sqlist &amp;lc)</span></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;la表内的值为：&quot;</span>);</span><br><span class="line"> <span class="built_in">appear</span>(la);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;lb表内的值为：&quot;</span>);</span><br><span class="line"> <span class="built_in">appear</span>(lb);</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> ii=<span class="number">0</span>;ii&lt;la.length;ii++)</span><br><span class="line">  &#123;<span class="built_in">listinsert1</span>(lc,ii<span class="number">+1</span>,la.elem[ii]);&#125;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;lb.length;i++)</span><br><span class="line">  &#123;<span class="type">int</span> why=<span class="built_in">locatelem</span>(lc,lb.elem[i]);</span><br><span class="line"> <span class="keyword">if</span>(why==<span class="number">0</span>)</span><br><span class="line">  <span class="built_in">listinsert1</span>(lc,lc.length<span class="number">+1</span>,lb.elem[i]);&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;lc表内的值为：&quot;</span>);</span><br><span class="line"> <span class="built_in">appear</span>(lc);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//lc内就地换位</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">inverse</span><span class="params">(sqlist &amp;lc)</span></span></span><br><span class="line"><span class="function"> </span>&#123; <span class="built_in">printf</span>(<span class="string">&quot;原来的lc为&quot;</span>);</span><br><span class="line"> <span class="built_in">appear</span>(lc);</span><br><span class="line"> <span class="type">int</span> swidth=lc.length/<span class="number">2</span>,h,l=lc.length;</span><br><span class="line"> <span class="keyword">for</span>(<span class="type">int</span> zhou=<span class="number">0</span>;zhou&lt;swidth;zhou++)</span><br><span class="line">  &#123;h=lc.elem[zhou];</span><br><span class="line">  lc.elem[zhou]=lc.elem[l<span class="number">-1</span>];</span><br><span class="line">  lc.elem[l<span class="number">-1</span>]=h;</span><br><span class="line">  l--;&#125;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;逆置后的lc为&quot;</span>);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i,j,k,l,w,hhh=<span class="number">1</span>;</span><br><span class="line"><span class="type">int</span> lawidth,lbwidth;</span><br><span class="line"><span class="type">int</span> laa[<span class="number">30</span>],lbb[<span class="number">30</span>];</span><br><span class="line">elemtype e,f,g;</span><br><span class="line">sqlist Q;</span><br><span class="line">sqlist la,lb,lc;</span><br><span class="line"><span class="built_in">intlist</span> (Q);</span><br><span class="line"><span class="built_in">intlist</span> (la);</span><br><span class="line"><span class="built_in">intlist</span> (lb);</span><br><span class="line"><span class="built_in">intlist</span> (lc);</span><br><span class="line">sqlist law;</span><br><span class="line"><span class="built_in">intlist</span>(law);</span><br><span class="line"></span><br><span class="line"><span class="comment">//快速创建一个顺序表</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入顺序表新建顺序表长度:&quot;</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;law.length);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入该顺序表的值:&quot;</span>);</span><br><span class="line">hhh=hhh+law.length;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;law.length;i++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;law.elem[i]);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> kk=<span class="number">0</span>;kk&lt;law.length;kk++)</span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">listinsert1</span>(Q,kk<span class="number">+1</span>,law.elem[kk]);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;说明：0为退出\n1为插入元素\n2为取值\n3为查找\n4为删除\n5为显示顺序表\n6为建立la，lb并且合并为lc\n7为就地逆置lc\n&quot;</span>);</span><br><span class="line"><span class="keyword">do</span>&#123; </span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n请输入你的操作数字\n&quot;</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;w);</span><br><span class="line"> <span class="keyword">if</span> (w==<span class="number">1</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;\n请输入你想插入的位置(1~%d)\n&quot;</span>,hhh);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line"> <span class="keyword">while</span>(i&gt;hhh||i&lt;<span class="number">1</span>)</span><br><span class="line">  &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;超范围了，请重新输入操作数字\n&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n请输入你想插入的位置(1~%d)\n&quot;</span>,hhh);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;i);</span><br><span class="line">  &#125;</span><br><span class="line"> ++hhh;</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;请输入你想插入元素的值\n&quot;</span>);</span><br><span class="line"> <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;e);</span><br><span class="line"> <span class="built_in">listinsert</span>(Q,i,e);</span><br><span class="line"> <span class="built_in">appear</span>(Q);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">2</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;\n请输入你想取值的元素位置(1~%d)\n&quot;</span>,(hhh<span class="number">-1</span>));</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;j);</span><br><span class="line">  <span class="keyword">if</span>(j&gt;hhh<span class="number">-1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;超范围了，请重新输入操作数字\n&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">  <span class="built_in">getrlme</span>(Q,j,f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该元素为%d\n&quot;</span>,f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">3</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;\n请输入查找元素的值\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;k);</span><br><span class="line">  <span class="type">int</span> lc=<span class="built_in">locatelem</span>(Q,k);</span><br><span class="line">  <span class="keyword">if</span>(lc)</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;元素的位置为%d\n&quot;</span>,lc);</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;该元素不存在&quot;</span>);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">4</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;\n请输入要删除元素的位置(1~%d)\n&quot;</span>,hhh<span class="number">-1</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;l);</span><br><span class="line">  <span class="keyword">if</span>(l&gt;hhh<span class="number">-1</span>) &#123;<span class="built_in">printf</span>(<span class="string">&quot;超范围了，请重新输入操作数字\n&quot;</span>);<span class="keyword">continue</span>;&#125;</span><br><span class="line">  <span class="built_in">listdelete</span>(Q,l,g);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;删除成功，删除的元素为%d\n&quot;</span>,g);</span><br><span class="line">  hhh--;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);&#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">5</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;\n显示顺序表\n&quot;</span>);</span><br><span class="line">  <span class="built_in">appear</span>(Q);&#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">6</span>)</span><br><span class="line">  &#123;<span class="built_in">printf</span>(<span class="string">&quot;请输入la的数据长度(1~30)：\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lawidth);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入la内的数据:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> cun=<span class="number">0</span>;cun&lt;lawidth;cun++)</span><br><span class="line">   &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;laa[cun]);&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> ruler=<span class="number">0</span>;ruler&lt;lawidth;ruler++)</span><br><span class="line">   &#123;<span class="built_in">listinsert1</span>(la,ruler<span class="number">+1</span>,laa[ruler]);&#125;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入lb的数据长度(1~30)：\n&quot;</span>);</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lawidth);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;请输入lb内的数据:&quot;</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> cun1=<span class="number">0</span>;cun1&lt;lawidth;cun1++)</span><br><span class="line">   &#123;<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;lbb[cun1]);&#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> ruler1=<span class="number">0</span>;ruler1&lt;lawidth;ruler1++)</span><br><span class="line">   &#123;<span class="built_in">listinsert1</span>(lb,ruler1<span class="number">+1</span>,lbb[ruler1]);&#125;</span><br><span class="line">  <span class="built_in">MergeList</span>(la,lb,lc);</span><br><span class="line">  &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span>(w==<span class="number">7</span>)</span><br><span class="line">  &#123;<span class="built_in">inverse</span>(lc);</span><br><span class="line">  <span class="built_in">appear</span>(lc);&#125;</span><br><span class="line"> <span class="keyword">else</span></span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"> &#125;<span class="keyword">while</span>(w);</span><br><span class="line"> <span class="built_in">printf</span>(<span class="string">&quot;谢谢使用\n&quot;</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构：链表（C语言）</title>
    <url>/2019-10-29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E9%93%BE%E8%A1%A8%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="该程序为用链表实现多项式的相加相乘"><a href="#该程序为用链表实现多项式的相加相乘" class="headerlink" title="该程序为用链表实现多项式的相加相乘"></a>该程序为用链表实现多项式的相加相乘</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunksize 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">chunk</span>&#123;</span><br><span class="line">	<span class="type">char</span> ch[chunksize];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">chunk</span> *next;</span><br><span class="line">&#125;chunk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">	chunk *head,*tail;</span><br><span class="line">	<span class="type">int</span> curlen;</span><br><span class="line">&#125;lstring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(lstring &amp;s)</span></span>&#123;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	t = s.head;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前块链长度为：%d\n&quot;</span>,s.curlen);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>( ; s.head != s.tail ; i++)&#123;</span><br><span class="line">		p = t-&gt;next;</span><br><span class="line">		s.head = p;</span><br><span class="line">		<span class="built_in">free</span>(t);</span><br><span class="line">		t = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(s.head);</span><br><span class="line">	s.head = s.tail = null;</span><br><span class="line">	s.curlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空成功，释放了%d个节点。\n&quot;</span>,i<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空后块链长度为：%d\n&quot;</span>,s.curlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear1</span><span class="params">(lstring &amp;s)</span></span>&#123;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	t = s.head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>( ; s.head != s.tail ; )&#123;</span><br><span class="line">		p = t-&gt;next;</span><br><span class="line">		s.head = p;</span><br><span class="line">		<span class="built_in">free</span>(t);</span><br><span class="line">		t = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(s.head);</span><br><span class="line">	s.head = s.tail = null;</span><br><span class="line">	s.curlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add0</span><span class="params">(lstring &amp;s,<span class="type">char</span> *a)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	p = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	s.head = s.tail = p;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;chunksize ; i++)&#123;</span><br><span class="line">		p-&gt;ch[i] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add1</span><span class="params">(lstring &amp;s,<span class="type">char</span> *a)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	p = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;chunksize ; i++)&#123;</span><br><span class="line">		p-&gt;ch[i] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		s.tail-&gt;next = p;</span><br><span class="line">		s.tail = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入s块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">strinsert</span><span class="params">(lstring &amp;t,lstring s)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a,long1,long2,aaa=<span class="number">0</span>,cc,hpu,ruler;</span><br><span class="line">	<span class="type">char</span> a1[] = &#123;<span class="string">&quot;########&quot;</span>&#125;,a2[] = &#123;<span class="string">&quot;########&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">	chunk *lc,*ly,*lz,*lw,*lm;</span><br><span class="line">	lc = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	ly = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	lz = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	lm = lw = t.head ;</span><br><span class="line">	ruler = t.curlen <span class="number">+1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您想插入到第几个字符前：(1~%d)\n&quot;</span>,t.curlen<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	hpu = a;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;a&lt;t.curlen<span class="number">+2</span>)</span><br><span class="line">		&#123;t.curlen += s.curlen;</span><br><span class="line">		a -= <span class="number">1</span>;</span><br><span class="line">		long1 = a/chunksize<span class="number">+1</span>;</span><br><span class="line">		long2 = a%chunksize;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;long1&gt;<span class="number">2</span>&amp;&amp;i &lt; long1 - <span class="number">2</span> ; i++)&#123;</span><br><span class="line">			lz = lm-&gt;next;</span><br><span class="line">			lm = lm-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; long1 - <span class="number">1</span> ; i++)&#123;</span><br><span class="line"></span><br><span class="line">			lc = lw-&gt;next;</span><br><span class="line">			lw = lw-&gt;next ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//for(int i=0;i&lt;8;i++)</span></span><br><span class="line">			<span class="comment">//printf(&quot;%c\n&quot;,lz-&gt;ch[i]);</span></span><br><span class="line">		<span class="comment">//for(int i=0;i&lt;8;i++)</span></span><br><span class="line">			<span class="comment">//printf(&quot;%c\n&quot;,lc-&gt;ch[i]);</span></span><br><span class="line">		<span class="keyword">if</span>(!(long1<span class="number">-1</span>))</span><br><span class="line">			lc = t.head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; long2 ; j++)</span><br><span class="line">			&#123;a1[j] = lc-&gt;ch[j];</span><br><span class="line">			 aaa++;&#125;</span><br><span class="line"></span><br><span class="line">		cc = aaa;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">8</span>-cc ; j++)</span><br><span class="line">			&#123;a2[j] = lc-&gt;ch[aaa];</span><br><span class="line">			aaa++;&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">0</span> ; w&lt;<span class="number">8</span> ; w++)</span><br><span class="line">			lc-&gt;ch[w] = a1[w];</span><br><span class="line"></span><br><span class="line">		ly-&gt;next = lc-&gt;next;</span><br><span class="line">		lc-&gt;next = ly;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">0</span> ; w&lt;<span class="number">8</span>  ; w++)</span><br><span class="line">			ly-&gt;ch[w] = a2[w];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(t.head == t.tail)</span><br><span class="line">			t.tail=ly;</span><br><span class="line">		<span class="keyword">if</span>(lc == t.tail)</span><br><span class="line">			t.tail = ly;</span><br><span class="line">		<span class="keyword">if</span>(hpu==<span class="number">1</span>)&#123;</span><br><span class="line">			s.tail-&gt;next  = ly; </span><br><span class="line">			t.head = s.head;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(hpu==<span class="number">9</span>)&#123;</span><br><span class="line">			s.tail -&gt;next = ly;</span><br><span class="line">			t.head-&gt;next =s.head ;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(hpu%<span class="number">8</span>==<span class="number">1</span>)&#123;</span><br><span class="line">			s.tail-&gt;next = ly ;</span><br><span class="line">			lz-&gt;next = s.head ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			s.tail-&gt;next= lc-&gt;next;</span><br><span class="line">			lc-&gt;next=s.head;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(hpu==ruler)&#123;</span><br><span class="line">			t.tail = s.tail ;</span><br><span class="line">			s.tail-&gt;next = null;</span><br><span class="line">			<span class="built_in">free</span>(ly);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123;<span class="built_in">printf</span>(<span class="string">&quot;超范围了，请重新输入\n&quot;</span>);</span><br><span class="line">		<span class="built_in">strinsert</span>(t,s);	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组中的元素插入块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">strassign</span><span class="params">(lstring &amp;s,<span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> width,long1,long2,aaa=<span class="number">0</span>;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	<span class="type">char</span> a[chunksize];</span><br><span class="line"></span><br><span class="line">	t=(chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	p=(chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	width=<span class="built_in">strlen</span>(str);</span><br><span class="line">	s.curlen=width;</span><br><span class="line">	long1=width/chunksize;</span><br><span class="line">	long2=width%chunksize;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(long1!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;long1;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;chunksize;j++)&#123;	</span><br><span class="line">				a[j]=str[aaa];</span><br><span class="line">				aaa++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">add0</span>(s,a);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">add1</span>(s,a);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(long2)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chunksize;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;long2)</span><br><span class="line">				&#123;a[i]=str[aaa];</span><br><span class="line">				aaa++;&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">add1</span>(s,a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chunksize;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;long2)</span><br><span class="line">				&#123;a[i]=str[aaa];</span><br><span class="line">				aaa++;&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">add0</span>(s,a);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除#号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zip</span><span class="params">(lstring &amp;t)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	<span class="type">char</span> bbbb[<span class="number">100</span>];</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	p=t.head;</span><br><span class="line">	<span class="keyword">while</span>(!(p==t.tail))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(p-&gt;ch[j]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">				&#123;bbbb[i]=p-&gt;ch[j];</span><br><span class="line">				i++;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;ch[j]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">		&#123;bbbb[i]=p-&gt;ch[j];i++;&#125;&#125;</span><br><span class="line">		bbbb[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		<span class="built_in">clear1</span>(t);</span><br><span class="line">	<span class="built_in">strassign</span>(t,bbbb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">appear</span><span class="params">(lstring s)</span></span>&#123;</span><br><span class="line">	chunk *t;</span><br><span class="line">	t=s.head;</span><br><span class="line">	<span class="keyword">while</span>(!(t==s.tail))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> jj=<span class="number">0</span>;jj&lt;<span class="number">8</span>;jj++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;ch[jj]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		t=t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(s.curlen)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> jj=<span class="number">0</span>;jj&lt;<span class="number">8</span>;jj++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;ch[jj]);</span><br><span class="line">		&#125;&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;块链内无元素&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>],str1[<span class="number">30</span>];</span><br><span class="line">	<span class="type">int</span> ruler;</span><br><span class="line">	lstring t,s;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:显示块链\n2:清空块链\n3:插入块链\n4:压缩块链\n5:清空原块链后，创建一个新块链\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入想创建串内的元素(不包括#):\n&quot;</span>);</span><br><span class="line">	<span class="built_in">gets</span>(str);</span><br><span class="line">	<span class="built_in">strassign</span>(t,str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n创建成功，创建后的块链为：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">appear</span>(t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入你想操作的数字：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ruler);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(ruler==<span class="number">1</span>)</span><br><span class="line">				<span class="built_in">appear</span>(t);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">2</span>)</span><br><span class="line">				<span class="built_in">clear</span>(t);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">3</span>)</span><br><span class="line">				&#123;<span class="keyword">if</span>(t.curlen)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入您想插入的字符串：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">fflush</span>(stdin);</span><br><span class="line">					<span class="built_in">gets</span>(str1);</span><br><span class="line">					<span class="built_in">strassign</span>(s,str1);</span><br><span class="line">					<span class="built_in">strinsert</span>(t,s);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n插入成功，插入后的块链为：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">appear</span>(t);</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;主串内无元素，无法插入\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">4</span>)</span><br><span class="line">				&#123;<span class="built_in">zip</span>(t);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n压缩成功，压缩后的块链为：\n&quot;</span>);</span><br><span class="line">				<span class="built_in">appear</span>(t);&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				&#123;<span class="built_in">printf</span>(<span class="string">&quot;请输入想新创建串内的元素(不包括#):\n&quot;</span>);</span><br><span class="line">				<span class="built_in">fflush</span>(stdin);</span><br><span class="line">				<span class="built_in">gets</span>(str);</span><br><span class="line">				<span class="built_in">strassign</span>(t,str);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n新创建成功，创建后的块链为：\n&quot;</span>);</span><br><span class="line">				<span class="built_in">appear</span>(t);&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">while</span>(ruler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构：块链（C语言）</title>
    <url>/2019-11-25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%EF%BC%9A%E5%9D%97%E9%93%BE%EF%BC%88C%E8%AF%AD%E8%A8%80%EF%BC%89/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote>
<p>经过了一些修改，已经能完成基本操作了。</p>
</blockquote>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> chunksize 8</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> null 0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">chunk</span>&#123;</span><br><span class="line">	<span class="type">char</span> ch[chunksize];</span><br><span class="line">	<span class="keyword">struct</span> <span class="title class_">chunk</span> *next;</span><br><span class="line">&#125;chunk;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span>&#123;</span><br><span class="line">	chunk *head,*tail;</span><br><span class="line">	<span class="type">int</span> curlen;</span><br><span class="line">&#125;lstring;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear</span><span class="params">(lstring *s)</span></span>&#123;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">	t = s-&gt;head;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;当前块链长度为：%d\n&quot;</span>,s-&gt;curlen);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>( ; s-&gt;head != s-&gt;tail ; i++)&#123;</span><br><span class="line">		p = t-&gt;next;</span><br><span class="line">		s-&gt;head = p;</span><br><span class="line">		<span class="built_in">free</span>(t);</span><br><span class="line">		t = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(s-&gt;head);</span><br><span class="line">	s-&gt;head = s-&gt;tail = null;</span><br><span class="line">	s-&gt;curlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空成功，释放了%d个节点。\n&quot;</span>,i<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;清空后块链长度为：%d\n&quot;</span>,s-&gt;curlen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩清空</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">clear1</span><span class="params">(lstring *s)</span></span>&#123;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	t = s-&gt;head;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>( ; s-&gt;head != s-&gt;tail ; )&#123;</span><br><span class="line">		p = t-&gt;next;</span><br><span class="line">		s-&gt;head = p;</span><br><span class="line">		<span class="built_in">free</span>(t);</span><br><span class="line">		t = p;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">free</span>(s-&gt;head);</span><br><span class="line">	s-&gt;head = s-&gt;tail = null;</span><br><span class="line">	s-&gt;curlen = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入节点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add0</span><span class="params">(lstring *s,<span class="type">char</span> *a)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	p = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	s-&gt;head = s-&gt;tail = p;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;chunksize ; i++)&#123;</span><br><span class="line">		p-&gt;ch[i] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add1</span><span class="params">(lstring *s,<span class="type">char</span> *a)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	p = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i&lt;chunksize ; i++)&#123;</span><br><span class="line">		p-&gt;ch[i] = a[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">		s-&gt;tail-&gt;next = p;</span><br><span class="line">		s-&gt;tail = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//插入s块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">strinsert</span><span class="params">(lstring *t,lstring s)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> a,long1,long2,aaa=<span class="number">0</span>,cc,hpu,ruler;</span><br><span class="line">	<span class="type">char</span> a1[] = &#123;<span class="string">&quot;########&quot;</span>&#125;,a2[] = &#123;<span class="string">&quot;########&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">	chunk *lc,*ly,*lz,*lw,*lm;</span><br><span class="line">	lc = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	ly = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	lz = (chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	lm = lw = t-&gt;head ;</span><br><span class="line">	ruler = t-&gt;curlen <span class="number">+1</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入您想插入到第几个字符前：(1~%d)\n&quot;</span>,t-&gt;curlen<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a);</span><br><span class="line">	hpu = a;</span><br><span class="line">	<span class="keyword">if</span>(a&gt;<span class="number">0</span>&amp;&amp;a&lt;t-&gt;curlen<span class="number">+2</span>)</span><br><span class="line">		&#123;t-&gt;curlen += s.curlen;</span><br><span class="line">		a -= <span class="number">1</span>;</span><br><span class="line">		long1 = a/chunksize<span class="number">+1</span>;</span><br><span class="line">		long2 = a%chunksize;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ;long1&gt;<span class="number">2</span>&amp;&amp;i &lt; long1 - <span class="number">2</span> ; i++)&#123;</span><br><span class="line">			lz = lm-&gt;next;</span><br><span class="line">			lm = lm-&gt;next;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span> ; i &lt; long1 - <span class="number">1</span> ; i++)&#123;</span><br><span class="line"></span><br><span class="line">			lc = lw-&gt;next;</span><br><span class="line">			lw = lw-&gt;next ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//for(int i=0;i&lt;8;i++)</span></span><br><span class="line">			<span class="comment">//printf(&quot;%c\n&quot;,lz-&gt;ch[i]);</span></span><br><span class="line">		<span class="comment">//for(int i=0;i&lt;8;i++)</span></span><br><span class="line">			<span class="comment">//printf(&quot;%c\n&quot;,lc-&gt;ch[i]);</span></span><br><span class="line">		<span class="keyword">if</span>(!(long1<span class="number">-1</span>))</span><br><span class="line">			lc = t-&gt;head;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; long2 ; j++)</span><br><span class="line">			&#123;a1[j] = lc-&gt;ch[j];</span><br><span class="line">			 aaa++;&#125;</span><br><span class="line"></span><br><span class="line">		cc = aaa;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span> ; j &lt; <span class="number">8</span>-cc ; j++)</span><br><span class="line">			&#123;a2[j] = lc-&gt;ch[aaa];</span><br><span class="line">			aaa++;&#125;</span><br><span class="line">	</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">0</span> ; w&lt;<span class="number">8</span> ; w++)</span><br><span class="line">			lc-&gt;ch[w] = a1[w];</span><br><span class="line"></span><br><span class="line">		ly-&gt;next = lc-&gt;next;</span><br><span class="line">		lc-&gt;next = ly;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> w = <span class="number">0</span> ; w&lt;<span class="number">8</span>  ; w++)</span><br><span class="line">			ly-&gt;ch[w] = a2[w];</span><br><span class="line"></span><br><span class="line">		<span class="keyword">if</span>(t-&gt;head == t-&gt;tail)</span><br><span class="line">			t-&gt;tail=ly;</span><br><span class="line">		<span class="keyword">if</span>(lc == t-&gt;tail)</span><br><span class="line">			t-&gt;tail = ly;</span><br><span class="line">		<span class="keyword">if</span>(hpu==<span class="number">1</span>)&#123;</span><br><span class="line">			s.tail-&gt;next  = ly; </span><br><span class="line">			t-&gt;head = s.head;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(hpu==<span class="number">9</span>)&#123;</span><br><span class="line">			s.tail -&gt;next = ly;</span><br><span class="line">			t-&gt;head-&gt;next =s.head ;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span>(hpu%<span class="number">8</span>==<span class="number">1</span>)&#123;</span><br><span class="line">			s.tail-&gt;next = ly ;</span><br><span class="line">			lz-&gt;next = s.head ;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span>&#123;</span><br><span class="line">			s.tail-&gt;next= lc-&gt;next;</span><br><span class="line">			lc-&gt;next=s.head;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(hpu==ruler)&#123;</span><br><span class="line">			t-&gt;tail = s.tail ;</span><br><span class="line">			s.tail-&gt;next = null;</span><br><span class="line">			<span class="built_in">free</span>(ly);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123;<span class="built_in">printf</span>(<span class="string">&quot;超范围了，请重新输入\n&quot;</span>);</span><br><span class="line">		<span class="built_in">strinsert</span>(t,s);	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将数组中的元素插入块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">strassign</span><span class="params">(lstring *s,<span class="type">char</span> *str)</span></span>&#123;</span><br><span class="line">	<span class="type">int</span> width,long1,long2,aaa=<span class="number">0</span>;</span><br><span class="line">	chunk *t,*p;</span><br><span class="line">	<span class="type">char</span> a[chunksize];</span><br><span class="line"></span><br><span class="line">	t=(chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line">	p=(chunk *)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(chunk));</span><br><span class="line"></span><br><span class="line">	width=<span class="built_in">strlen</span>(str);</span><br><span class="line">	s-&gt;curlen=width;</span><br><span class="line">	long1=width/chunksize;</span><br><span class="line">	long2=width%chunksize;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(long1!=<span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;long1;i++)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;chunksize;j++)&#123;	</span><br><span class="line">				a[j]=str[aaa];</span><br><span class="line">				aaa++;</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">if</span>(i==<span class="number">0</span>)</span><br><span class="line">				<span class="built_in">add0</span>(s,a);</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				<span class="built_in">add1</span>(s,a);</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span>(long2)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chunksize;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;long2)</span><br><span class="line">				&#123;a[i]=str[aaa];</span><br><span class="line">				aaa++;&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		<span class="built_in">add1</span>(s,a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		&#123;<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;chunksize;i++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(i&lt;long2)</span><br><span class="line">				&#123;a[i]=str[aaa];</span><br><span class="line">				aaa++;&#125;</span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				a[i]=<span class="string">&#x27;#&#x27;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">add0</span>(s,a);&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//删除#号</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">zip</span><span class="params">(lstring *t)</span></span>&#123;</span><br><span class="line">	chunk *p;</span><br><span class="line">	<span class="type">char</span> bbbb[<span class="number">100</span>];</span><br><span class="line">	<span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">	p=t-&gt;head;</span><br><span class="line">	<span class="keyword">while</span>(!(p==t-&gt;tail))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">			<span class="keyword">if</span>(p-&gt;ch[j]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">				&#123;bbbb[i]=p-&gt;ch[j];</span><br><span class="line">				i++;&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		p=p-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">8</span>;j++)&#123;</span><br><span class="line">		<span class="keyword">if</span>(p-&gt;ch[j]!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">		&#123;bbbb[i]=p-&gt;ch[j];i++;&#125;&#125;</span><br><span class="line">		bbbb[i]=<span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">		<span class="built_in">clear1</span>(t);</span><br><span class="line">	<span class="built_in">strassign</span>(t,bbbb);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//显示块链</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">appear</span><span class="params">(lstring s)</span></span>&#123;</span><br><span class="line">	chunk *t;</span><br><span class="line">	t=s.head;</span><br><span class="line">	<span class="keyword">while</span>(!(t==s.tail))&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> jj=<span class="number">0</span>;jj&lt;<span class="number">8</span>;jj++)&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;ch[jj]);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">		t=t-&gt;next;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(s.curlen)&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="type">int</span> jj=<span class="number">0</span>;jj&lt;<span class="number">8</span>;jj++)&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,t-&gt;ch[jj]);</span><br><span class="line">		&#125;&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;块链内无元素&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	<span class="type">char</span> str[<span class="number">100</span>],str1[<span class="number">30</span>];</span><br><span class="line">	<span class="type">int</span> ruler;</span><br><span class="line">	lstring t,s;</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;1:显示块链\n2:清空块链\n3:插入块链\n4:压缩块链\n5:清空原块链后，创建一个新块链\n\n&quot;</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;请输入想创建串内的元素(不包括#):\n&quot;</span>);</span><br><span class="line">	<span class="built_in">gets</span>(str);</span><br><span class="line">	<span class="built_in">strassign</span>(&amp;t,str);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n创建成功，创建后的块链为：\n&quot;</span>);</span><br><span class="line">	<span class="built_in">appear</span>(t);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	<span class="keyword">do</span>&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;请输入你想操作的数字：&quot;</span>);</span><br><span class="line">		<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;ruler);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">if</span>(ruler==<span class="number">1</span>)</span><br><span class="line">				<span class="built_in">appear</span>(t);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">2</span>)</span><br><span class="line">				<span class="built_in">clear</span>(&amp;t);</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">3</span>)</span><br><span class="line">				&#123;<span class="keyword">if</span>(t.curlen)&#123;</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;输入您想插入的字符串：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">fflush</span>(stdin);</span><br><span class="line">					<span class="built_in">gets</span>(str1);</span><br><span class="line">					<span class="built_in">strassign</span>(&amp;s,str1);</span><br><span class="line">					<span class="built_in">strinsert</span>(&amp;t,s);</span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;\n插入成功，插入后的块链为：\n&quot;</span>);</span><br><span class="line">					<span class="built_in">appear</span>(t);</span><br><span class="line">					&#125;</span><br><span class="line">				<span class="keyword">else</span></span><br><span class="line">					<span class="built_in">printf</span>(<span class="string">&quot;主串内无元素，无法插入\n&quot;</span>);</span><br><span class="line">				&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span> <span class="keyword">if</span>(ruler==<span class="number">4</span>)</span><br><span class="line">				&#123;<span class="built_in">zip</span>(&amp;t);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n压缩成功，压缩后的块链为：\n&quot;</span>);</span><br><span class="line">				<span class="built_in">appear</span>(t);&#125;</span><br><span class="line"></span><br><span class="line">			<span class="keyword">else</span></span><br><span class="line">				&#123;<span class="built_in">printf</span>(<span class="string">&quot;请输入想新创建串内的元素(不包括#):\n&quot;</span>);</span><br><span class="line">				<span class="built_in">fflush</span>(stdin);</span><br><span class="line">				<span class="built_in">gets</span>(str);</span><br><span class="line">				<span class="built_in">strassign</span>(&amp;t,str);</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;\n新创建成功，创建后的块链为：\n&quot;</span>);</span><br><span class="line">				<span class="built_in">appear</span>(t);&#125;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;\n----------------------------------------\n\n&quot;</span>);</span><br><span class="line">	&#125;<span class="keyword">while</span>(ruler);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习</title>
    <url>/2018-12-25/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="机器学习"><a href="#机器学习" class="headerlink" title="机器学习"></a>机器学习</h2><p>   &#x3D;&#x3D;<strong>1.监督学习</strong>&#x3D;&#x3D;<br>    利用一组已知类别的样本调整算法的参数，使其达到所要求的性能。<br>  &#x3D;&#x3D;<strong>2.无监督学习</strong>&#x3D;&#x3D;<br>  利用聚类算法，不知样本类别，使其达到所要求的性能。<br>  3.过拟合：训练集好，测试集不好。(后期再详细介绍）<br>  欠拟合：两者都不好。</p>
<hr>
<h1 id="单变量线性回归"><a href="#单变量线性回归" class="headerlink" title="单变量线性回归"></a>单变量线性回归</h1><p>  &#x3D;&#x3D;<strong>1.代价函数</strong>&#x3D;&#x3D;（先算损失函数，再用代价函数J优化参数值，损失函数越接近0越好，损失函数即方差【也可以再乘与0.5】）<br>先从简单的写：y&#x3D;kx（θ不好用，也不好打所以用k，b代替）<br>代价函数J(k）是一条抛物线（如图）<br><a href="https://i-blog.csdnimg.cn/blog_migrate/acdf32b8c364f794d16b17180646726d.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/acdf32b8c364f794d16b17180646726d.jpeg" alt="在这里插入图片描述"></a><br>然后当y&#x3D;kx+b时<br>代价函数J（k，b)是碗状三维图形<a href="https://i-blog.csdnimg.cn/blog_migrate/31bb68d137841628422a3053749cfc1e.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/31bb68d137841628422a3053749cfc1e.jpeg" alt="在这里插入图片描述"></a>&#x3D;&#x3D;<strong>2.代价函数</strong>&#x3D;&#x3D;<br>1.通过降低J（k）；J(k，b）的值，找到最小的j值，或全局最小。（公式：下面图中有）<br>2.当k，b的起始值不同时，得到最后的最优值也可能不同。<br>3.k，b同时变换，如果已经在局部最优则不再变换。<br>4.随着k值的减小，移动幅度越来越慢，学习率不用改变。<br>5.学习率α不易过大或过小：过小接近最优处速度较慢，过大可能会移动幅度太大跃过最优值。<a href="https://i-blog.csdnimg.cn/blog_migrate/4f9a568b543bd4ee732b6ac8db8ab533.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/4f9a568b543bd4ee732b6ac8db8ab533.jpeg" alt="在这里插入图片描述"></a><br>6.随着越来越接近局部最优值，移动幅度会逐渐变小，α的值不用改变。<br><a href="https://i-blog.csdnimg.cn/blog_migrate/88bceb0c263a506e2ed968b544ee3f00.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/88bceb0c263a506e2ed968b544ee3f00.jpeg" alt="在这里插入图片描述"></a></p>
<hr>
<h1 id="矩阵"><a href="#矩阵" class="headerlink" title="&#x3D;&#x3D;矩阵&#x3D;&#x3D;"></a><strong>&#x3D;&#x3D;矩阵&#x3D;&#x3D;</strong></h1><p>1.矩阵加法，减法：（个人理解）就是相同位置上的数相加减，行列数要相同。</p>
<p>2.乘法：口头不好描述，上图<a href="https://i-blog.csdnimg.cn/blog_migrate/6318c8aebf155338bf423a52cd89a2d6.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/6318c8aebf155338bf423a52cd89a2d6.png" alt="在这里插入图片描述"></a><br>前面的行数和后面的列数相同。</p>
<p>3.矩阵不遵守乘法交换率（与单位矩阵相乘除外），遵守乘法结合律。		<br><em>单位矩阵：行数和列数相同的矩阵，对角线数字为1，其他位置为0.</em></p>
<p>4.矩阵逆运算：两个矩阵相乘等于单位矩阵。则一个矩阵称为另一个矩阵的逆矩阵。<br>没有逆矩阵的矩阵可以近似为0。叫做奇异矩阵或退化矩阵。</p>
<p>5.矩阵转置运算：横着的矩阵翻转变成竖着。翻转后：左上对左上，左下对右上。</p>
<hr>
<h2 id="多变量线性回归"><a href="#多变量线性回归" class="headerlink" title="多变量线性回归"></a>多变量线性回归</h2><p>1.有多个变量，例如估算房价，面积，房间数，房龄………<br>公式与单变量线性回归相似，不过变量要分类。</p>
<p>2.可以用矩阵来代替公式，较简单。取个x0&#x3D;1.</p>
<p>3.代价函数J（θ）的下降。<br>对θ分别进行下降，公式相同<a href="https://i-blog.csdnimg.cn/blog_migrate/eb208ea11ab94edee69d4858df4ae986.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/eb208ea11ab94edee69d4858df4ae986.jpeg" alt="在这里插入图片描述"></a><br>4.特征缩放：由于当不同变量数值先插过大时会经过很长时间才能算出结果，因此可以让变量除以一个数，让变量在[-1,1]之间（这只是一个近似值），最好是不要超出[-3,3]和[-1\3,1\3].</p>
<p>5.多元梯度下降：<br>学习率α，不宜过大也不宜过小。过小耽误时间，过大会跳过最优解。</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>机器学习</tag>
      </tags>
  </entry>
  <entry>
    <title>高数第七章</title>
    <url>/2018-01-12/%E9%AB%98%E6%95%B0%E7%AC%AC%E4%B8%83%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="微分方程"><a href="#微分方程" class="headerlink" title="微分方程"></a>微分方程</h2><p><strong>一、微分方程的基本概念</strong></p>
<p>1.凡表示未知函数，未知函数的导数与自变量之间关系的方程叫做微分方程。<br>2.最高阶导数的阶数叫做微分方程的阶。<br>3.通解：微分方程的解中含有任意常数，且常数个数与方程阶数相同。</p>
<hr>
<hr>
<p><strong>二、可分离变量微分方程</strong><br>1.可分离变量微分方程：含x，y的项，可以分别写在等号两侧，然后进行反导。</p>
<hr>
<hr>
<p><strong>三、齐次方程</strong><br>1.一阶微分方程：    $\frac{dy}{dx}$&#x3D;φ($\frac{y}{x}$)，或者可化为这种形式的方程称为齐次方程。<br>设u&#x3D;$\frac{y}{x}$，所以说y&#x3D;ux,$\frac{dy}{dx}$&#x3D;u+x($\frac{du}{dx}$)<br>带入原函数可计算<br>最后再将u用x,y替换回来。</p>
<hr>
<hr>
<p><strong>四、一阶线性微分方程</strong><br>1.一阶线性微分方程：$\frac{dy}{dx}$+$P_x$y&#x3D;$Q_x$<br>若$Q_x$&#x3D;0,则方程为齐次的，反之为非齐次的。<br>2.非齐次方程求解：<br>　　　①先求出对应齐次线性方程的解。<br>　　　②然后设常数项C为$u_x$。<br>　　　③然后将u代入y，求出y’。<br>　　　④将y与y’代入题方程中变换得出u。<br>　　　⑤再将u代入齐次方程解中得出非其次方程解。</p>
<hr>
<hr>
<p><strong>五、可降阶的高阶微分方程</strong><br>1.y^(n)^&#x3D;f(x)型：<br>此类型没什么特殊的，一阶一阶求积分即可。</p>
<p>2.y’’&#x3D;f(x,y’)型（不含y）：<br>设y’&#x3D;P<br>$\therefore$y’’&#x3D;P’<br>方程变成了一阶微分方程，求解，再进行替换即可。</p>
<p>3.y’’&#x3D;f(y,y’)型（不含x）：<br>设y’&#x3D;P<br>$\therefore$y’’&#x3D;P$\frac{dP}{dy}$<br>代入原方程，积分……<del>即可</del></p>
<hr>
<hr>
<p><strong>六、高阶线性微分方程</strong><br>二阶齐次线性方程：y’’+P(x)y’+Q(x)y&#x3D;0<br>定理一：如果函数$y_1$(x)与$y_2$(x)是该方程的解，那么<br>　　　　y&#x3D;$C_1$$y_1$(x)+$C_2$$y_2$(x)<br>　　　　也是其解。<br>　　　　<br>定理二：如果$y_1$(x)与$y_2$(x)是方程的两个线性无关的特解，那么<br>　　　　y&#x3D;$C_1$$y_1$(x)+$C_2$$y_2$(x)<br>　　　　也是方程通解。<br>　　　　<br>定理三：设y^<em>^是二阶非齐次线性方程y’’+P(x)y’+Q(x)y&#x3D;f(x)的一个特解<br>　　　Y（x）是对应齐次方程的通解，则y&#x3D;Y(x)+y^</em>^(x)<br>　　　也是二阶非齐次线性方程的通解。<br>　　　<br><strong>定理四：设非其次线性方程右端f(x)是两个函数之和，即<br>　　　y’’+P(x)y’+Q(x)y&#x3D;$f_1$(x)+$f_2$(x)<br>　　　而$y_1$^<em>^(x)与$y_2$^</em>^(x)分别是方程<br>　　　y’’+P(x)y’+Q(x)y&#x3D;$f_1$(x)与<br>　　　y’’+P(x)y’+Q(x)y&#x3D;$f_2$(x)的特解<br>　　　则$y_1$^<em>^(x)+$y_2$^</em>^(x)是原方程的特解</strong></p>
<hr>
<hr>
<p><strong>七、常系数齐次线性微分方程</strong><br>1.对应y&#x3D;0,y’&#x3D;r,y’’&#x3D;r^2^</p>
<table>
<thead>
<tr>
<th>特征方程r^2^+pr+q&#x3D;0的两根r1,r2</th>
<th>通解</th>
</tr>
</thead>
<tbody><tr>
<td>不等实根</td>
<td>y&#x3D;$c_1$ e^(r1x)^+ $c_2$ e^r2x^</td>
</tr>
<tr>
<td>相等实根</td>
<td>y&#x3D;($c_1$+$c_2$x)e^r1x^</td>
</tr>
<tr>
<td>共轭复根r1,2&#x3D;α±βi</td>
<td>y&#x3D;e^αx^($c_1$cosβx+$c_2$sinβx)</td>
</tr>
<tr>
<td>2.</td>
<td></td>
</tr>
<tr>
<td>特征方程的根</td>
<td>微分方程通解中的对应项</td>
</tr>
<tr>
<td>-</td>
<td>-</td>
</tr>
<tr>
<td>单实根r</td>
<td>给出一项：Ce^rx^</td>
</tr>
<tr>
<td>一对单复根r1,2&#x3D;α±βi</td>
<td>给出两项：e^αx^($C_1$cosβ+$C_2$sinβ)</td>
</tr>
<tr>
<td>k重实根r</td>
<td>给出k项：e^rx^($C_1$+$C_2$x+…+$C_k$x^k-1^)</td>
</tr>
<tr>
<td>一对k重实根r1,2&#x3D;α±βi</td>
<td>给出2k项：e^αx^[($C_1$+$C_2$x+…+$C_k$x^k-1^)]cosβx+（$D_1$+$D_2$x+…+$D_k$x^k-1^sinβx）</td>
</tr>
</tbody></table>
<hr>
<hr>
<p><strong>第八章：常系数非齐次线性微分方程</strong><br>一般形式：y’’+py’+qy&#x3D;f(x)<br><strong>1</strong>.f(x)&#x3D;e^λx^$P_x$(x)型：</p>
<p>　（i）如果λ不是特征方程r^2^+pr+q&#x3D;0的根，即λ^2^+pr+q≠0，则设$R_m$(x)&#x3D;$b_0$ x^m^ + $b_1$ x^m-1^ + … + $b_m$$_-$$_1$ x + $b_m$<br>　<br>　　(ii)如果λ是特征方程得单根，即λ^2^+pr+q&#x3D;0,但2λ+p≠0，则设R(x)&#x3D;x$R_m$(x)  [用同样的方法确定$R_m$(x)的系数$b_i$]<br>　　<br>  　　(iii)如果λ是特征方程r^2^+pr+q&#x3D;0的重根，即λ^2^+pr+q≠0，且2λ+p&#x3D;0 ，则设R(x)&#x3D;$x^2$$R_m$(x) [用同样的方法确定$R_m$(x)的系数$b_i$]</p>
<p> <strong>综上:</strong><br> 　　如果f(x)&#x3D;e^λx^$P_x$(x),那么二阶常系数非齐次线性微分方程具有形如：y*&#x3D;$x^k$$R_m(x)$e^λx^,其中k按是不是特征方程的解取值依次为0,1,2. </p>
<hr>
<p> <strong>2.</strong> f(x)&#x3D;e^λx^[$P_l$(x)$\cos\omega$x+$Q_n$(x)$\sin\omega$x]<br>　直接结论：<br>　　设特解为：y*&#x3D;x^K^e^λx^[$R_m^1$(x)$\cos\omega$x+$R_m^2$(x)$\sin\omega$x]<br>　　<strong>·</strong> 其中$R_m^1$(x)，$R_m^2$(x)是m次多项式（$R_m$(x)&#x3D;$b_0$ x^m^ + $b_1$ x^m-1^ + … + $b_m$$_-$$_1$ x + $b_m$），m&#x3D;max { l,n }.【l,n为三角函数前所跟x的多少次方】<br>　　<strong>·</strong> k按λ+ωi（或λ-ωi）不是特征方程的根，是特征方程的根依次取0或1<br>　　<br> &#x3D;&#x3D;求特解步骤：<br> ①写出对应齐次方程。<br> ②变成特征方程。<br> ③计算λ或 { λ+ωi (λ-ωi) ｝是不是特征方程的根，设出特解y*。<br> ④计算出y’,y’’代入题中原方程。<br> ⑤待定系数法求出未知数，得出微分方程特解。<br> <del>⑥求通解的话，再加上对应齐次方程通解即可</del>&#x3D;&#x3D;</p>
<hr>
<hr>
<hr>
<p>点击查看：<br><a href="https://blog.csdn.net/qq_43604520/article/details/86083891">第三章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/86088726">第四章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/86100636">第五章</a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>高数第三章</title>
    <url>/2019-01-08/%E9%AB%98%E6%95%B0%E7%AC%AC%E4%B8%89%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="微分中值定理与导数的应用"><a href="#微分中值定理与导数的应用" class="headerlink" title="微分中值定理与导数的应用"></a>微分中值定理与导数的应用</h2><p>一·<strong>微分中值定理</strong><br>㈠罗尔定理：<br>　　内容：f(x)在闭区间上连续，在开区间上可导，且在区间端点处函数值相同。<br>　　则f(x)在该区间内至少存在一点，该点的导数值为0。<br>　　<br>　　<em>如果是考研题的话，一般需要构造辅助函数来寻找f(x)。</em></p>
<blockquote>
<p>P182第六题</p>
</blockquote>
<p>㈡拉格朗日中值定理<br>　　内容：f(x)在闭区间上连续，在开区间上可导，<br>　　则在该区间内至少存在一点使<br>　　f(b)-f(a)&#x3D;f’(θ)(b-a)成立。（可以变形）<br>　　可以理解为：在区间内存在一点，该点的斜率与两端点连线斜率相同。</p>
<blockquote>
<p>P182页最上面第一小题，课后第十小题</p>
</blockquote>
<p>㈢柯西中值定理（参数方程下的拉格朗日）<br>　　内容：f(x),F(x)在闭区间连续，开区间可导，且F’(x)≠0<br>　　则存在<br>　　　<a href="https://i-blog.csdnimg.cn/blog_migrate/856c3e3f63ca7ba43168321f9c8aae6b.png" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/856c3e3f63ca7ba43168321f9c8aae6b.png" alt="在这里插入图片描述"></a><br>成立</p>
<hr>
<p>三大定理用法比较多。知道定理就好，不变应万变。</p>
<hr>
<p>二·&#x3D;&#x3D;<strong>洛必达法则</strong>&#x3D;&#x3D;<br>㈠两种未定式情况：零比零型（将趋近值带入，分子分母都为0），无穷比无穷型。<br>在这两种情况下，分子分母可以同时求导，如得不出答案，还可以继续求导，直至得到结果</p>
<blockquote>
<p>例二，例三，例五</p>
</blockquote>
<p>㈡做题过程中可能会遇见其他情况的未定式需进行变形：<a href="https://i-blog.csdnimg.cn/blog_migrate/ac20219e4bd25d6358d5b66fc12721ca.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/ac20219e4bd25d6358d5b66fc12721ca.jpeg" alt="在这里插入图片描述"></a></p>
<p>碰上这几种未定式都依次进行转换，转变成那两种基本类型。（通分，取对数没啥讲的，取倒是将其中一个值变成它分之一，然后移到分母上。因为无穷大与无穷小互为倒数）<em>无穷小为为0</em></p>
<blockquote>
<p>例7,8,9</p>
</blockquote>
<p>㈢<strong>课后第二题</strong>，不能用洛必达的情况（虽然是无穷比无穷):<br>   　导之后分子分母极限都存在或都为无穷的情况才能用洛必达。若不存在就不能用洛必达定理(一般情况不会遇见)</p>
<hr>
<p>   三·<strong>泰勒公式</strong><br>   　　本科阶段对其要求不高，考研阶段经常用。<br>   　　须记住几个常见的：<br>   　　<a href="https://i-blog.csdnimg.cn/blog_migrate/0b4171bc1ee3edacb03cdfc7d677c485.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/0b4171bc1ee3edacb03cdfc7d677c485.jpeg" alt="在这里插入图片描述"></a></p>
<hr>
<p>   四·<strong>单调性与凹凸性</strong><br> ㈠单调性：（用一阶导函数判）<br> 　　一阶导函数：大于0的为增函数，小于0的为减函数。【一阶导为0的点称为驻点】<br> 　　<br>   ㈡凹凸性：（用二阶导函数判）<br>   　　二阶导函数：大于0的为凹函数，小于0的为凸函数，（记不住的话，考试的时候可以用个简单的抛物线心算一下）【二阶导为0的点称为拐点。它是一个点，<strong>不是横坐标</strong>】<br>   　　补：<em>瑕点：简单来说就是求极限时使分母为0的点</em></p>
<hr>
<p>  五·<strong>极值最值</strong><br>  &#x3D;&#x3D;极值求法：&#x3D;&#x3D;<br>  利用一阶导：高中应该学过吧</p>
<p>  利用二阶导：首先函数得有二阶导，且一阶导为0，则当二阶导小于零时为在该点取极大值，反之为极小值</p>
<p>　利用n阶导：课本p161页第四题（表达非常清晰，不再打了） </p>
<blockquote>
<p>练习：p182上面第二小题</p>
</blockquote>
<p><strong>最值</strong><br>把驻点，不可导点，区间端点分别带进函数，比较大小即可</p>
<hr>
<p>六·<strong>画图</strong><br>①列个表格，找出驻点，拐点，然后分割区间<br>②写出各区间内函数增减情况<br>③找出驻点，拐点的函数值<br>④找出一些其他点补充一下图形准确性<br>⑤画图</p>
<blockquote>
<p>看两道例题，学学步骤</p>
</blockquote>
<hr>
<p>七·<strong>曲率</strong>（只记公式就可以）<br> ㈠弧微分：（几种不同的函数）<a href="https://i-blog.csdnimg.cn/blog_migrate/6b5b1a670357d80f7620f4422f54806c.jpeg" title="几种不同的函数" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/6b5b1a670357d80f7620f4422f54806c.jpeg" alt="几种不同的函数"></a><br>记住会用会带入就好</p>
<p>㈡曲率：<a href="https://i-blog.csdnimg.cn/blog_migrate/07294db39c9cbb34604ab55561e7fb0c.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/07294db39c9cbb34604ab55561e7fb0c.jpeg" alt="在这里插入图片描述"></a></p>
<p>参数方程曲率计算公式：<br><a href="https://i-blog.csdnimg.cn/blog_migrate/ec3e4d61abc915cec165f9caa18202fd.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/ec3e4d61abc915cec165f9caa18202fd.jpeg" alt="在这里插入图片描述"></a></p>
<blockquote>
<p>例二</p>
</blockquote>
<p>㈢曲率圆与曲率半径：<br>　　<strong>有公切线，凹向一致，曲率相同。</strong><br>　　曲率&#x3D;&#x3D;半径&#x3D;&#x3D;与函数该点曲率互为倒数</p>
<blockquote>
<p>例三，课后1,4,5</p>
</blockquote>
<hr>
<p>点击查看：<br><a href="https://blog.csdn.net/qq_43604520/article/details/86088726">第四章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/86100636">第五章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/88982980">第七章</a>
　　　　　　　　　　　　　　　　　　　　　</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>高数第五章</title>
    <url>/2018-01-11/%E9%AB%98%E6%95%B0%E7%AC%AC%E4%BA%94%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><blockquote>
<p>由于图片太难看了，所以说更新了一下换成了文字。</p>
</blockquote>
<h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2><p>一·<strong>定积分的性质</strong><br>㈠ 基本性质：</p>
<p>(1)当b&#x3D;a时， $\int_{a}^{a} f(x) ,dx$&#x3D;0</p>
<p>(2)当a&gt;b时， $\int_{a}^{b} f(x) ,dx$&#x3D;- $\int_{b}^{a} f(x) ,dx$  </p>
<hr>
<p>㈡推论：</p>
<p>推论一：如果在区间[a,b]上f(x)≤g(x),那么  $\int_{a}^{b} f(x) ,dx$ ≤  $\int_{a}^{b} g(x) ,dx$  (a&lt;b)<br>　　　　<br>推论二：∣$\int_{a}^{b} f(x) ,dx$ ∣ ≤$\int_{a}^{b} |f(x)| ,dx$  </p>
<hr>
<p>㈢定积分中值定理：在区间[a,b]上至少存在一点ε使得以区间[a，b]为底边，以曲线y&#x3D;f(x)为曲边的曲边梯形的面积等于同一底边而高为f(ε)的一个矩形的面积。<a href="https://i-blog.csdnimg.cn/blog_migrate/f7ced2abcf91d3dfa2f66198be99e6cc.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/f7ced2abcf91d3dfa2f66198be99e6cc.jpeg" alt="在这里插入图片描述"></a><br>　　　　f($\xi$)&#x3D; $\frac{1}{b-a}$$\int_{a}^{b} f(x) ,dx$</p>
<p>f(ε)称为函数f(x)在区间[a,b]上的平均值。</p>
<hr>
<p>二·<strong>微积分基本公式</strong><br>㈠积分上限函数求导：<br> 　　　　通俗来讲，就是将积分上限（不是上限的话加个负号，变为上限）中的未知数直接替代被积函数中的未知数。注意d*中的未知数也要替换。</p>
<blockquote>
<p>课后习题第五</p>
</blockquote>
<p>㈡牛顿莱布尼茨公式：<br>　　　　直接求反导，然后上下限分别代入，上限带入的结果减去下限带入的结果。<br>　　　　也可以与求极限相结合，利用洛必达计算。。。p243例八 </p>
<hr>
<p>三·<strong>换元法与分部积分法</strong><br>㈠换元法：与不定积分大体不差，只举不同处。</p>
<p>①若f(x)在[-a,a]上为偶函数，则可以求在[0,a]上的定积分，再乘2.<br>若为奇函数则直接等于0.｛偶倍奇零｝</p>
<p>②有许多有用的结论：<br>	设f(x)在[0,1]上连续，可得：<br>	<br>（1）$\int_{0}^{\pi&#x2F;2} f($sinx$) ,dx$&#x3D;$\int_{0}^{\pi&#x2F;2} f($cosx$) ,dx$<br>	<br> (2)$\int_{0}^{\pi} xf($sinx$) ,dx$&#x3D;$\pi$&#x2F;2$\int_{0}^{\pi} f($sinx$) ,dx$&#x3D;$\pi$$\int_{0}^{\pi&#x2F;2} f($sinx$) dx$</p>
<hr>
<p> 设f(x)是连续的周期函数，周期为T，则</p>
<p> （1）$\int_{a}^{a+T} f(x) dx$&#x3D;$\int_{0}^{T} f(x) ,dx$</p>
<p> (2)$\int_{a}^{a+nT} f(x) dx$&#x3D;n$\int_{0}^{T} f(x) ,dx$ (n$\in$N)</p>
<hr>
<p>㈡分部积分法：<br>　　　计算sin或cos的n次方（有区间限制[0,π&#x2F;2]<br>　　　<br>$I_2m$&#x3D;$\frac{2m-1}{2m}$ $\cdot$$\frac{2m-3}{2m-2}$ $\cdot$……$\frac{5}{6}$ $\cdot$$\frac{3}{4}$ $\cdot$$\frac{1}{2}$ $I_0$</p>
<p>$I_2m+1$&#x3D;$\frac{2m}{2m+1}$ $\cdot$$\frac{2m-2}{2m-1}$ $\cdot$……$\frac{6}{7}$ $\cdot$$\frac{4}{5}$ $\cdot$$\frac{2}{3}$ $I_1$(m&#x3D;1,2,3…)</p>
<p>其中：<br>$I_0$&#x3D;$\int_{0}^{\pi&#x2F;2} dx$&#x3D; $\frac{\pi}{2}$</p>
<p>$I_1$&#x3D;$\int_{0}^{\pi&#x2F;2}sinx  dx$&#x3D;1</p>
<hr>
<p>四·<strong>反常积分</strong></p>
<p>只需注意一点：瑕点，有瑕点时需要暴露出来，把区间分两段。<br><strong>一般来说</strong>：当上下限都存在时，才会有瑕点。<br>（有极限时为收敛，无极限时为发散）</p>
<hr>
<hr>
<hr>
<p>点击查看：<br><a href="https://blog.csdn.net/qq_43604520/article/details/86083891">第三章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/86088726">第四章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/88982980">第七章</a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>高数第四章</title>
    <url>/2018-01-09/%E9%AB%98%E6%95%B0%E7%AC%AC%E5%9B%9B%E7%AB%A0/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><p> 一·<strong>不定积分概念与性质</strong><br> ㈠p188基本积分表：这是根本，不过不用背，会计算就行</p>
<p>㈡性质：相加可以分开<a href="https://i-blog.csdnimg.cn/blog_migrate/7bef725fe451ba255c88b44438f21206.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/7bef725fe451ba255c88b44438f21206.jpeg" alt="在这里插入图片描述"></a><br>乘个常数，常数可以提出来<br><a href="https://i-blog.csdnimg.cn/blog_migrate/8ca9d46881328306e78b27e5f7b4d72d.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/8ca9d46881328306e78b27e5f7b4d72d.jpeg" alt="在这里插入图片描述"></a></p>
<blockquote>
<p>例九，例十，例十二，例十五</p>
</blockquote>
<hr>
<p>二·&#x3D;&#x3D;<strong>换元积分法</strong>&#x3D;&#x3D;<br>㈠第一类换元积分法：<br>　　　　将一个长的，不好化简的式子用u代替，使计算变简单。（积分变量内也要替换）<br>　　　　或者是将积分变量变成其他的（dx变为d？）</p>
<blockquote>
<p>感觉这一节例题都不错，都看看吧，最好还是自己做做，做不出来再看解析</p>
</blockquote>
<p>㈡第二类换元积分法：<br>　　　　利用那两个三角公式<a href="https://i-blog.csdnimg.cn/blog_migrate/4f4f6b44df2f6d706d708438121f8731.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/4f4f6b44df2f6d706d708438121f8731.jpeg" alt="在这里插入图片描述"></a><br>　　　　<a href="https://i-blog.csdnimg.cn/blog_migrate/fc96c972719e22bfda4a76b78592cb6a.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/fc96c972719e22bfda4a76b78592cb6a.jpeg" alt="在这里插入图片描述"></a></p>
<p>进行适当代换</p>
<p>㈢还有一种代换叫倒代换，p204页例24.记住这种方法</p>
<blockquote>
<p>例二十一，二十二，二十三</p>
</blockquote>
<p>㈣p205，九个公式，最好全记住。<br><strong>虽然说总结的话没有多少可以写的，但是如果做题的话会碰到许多类型，需要多练习。熟练掌握</strong></p>
<hr>
<p>三·<strong>分部积分法</strong><br><a href="https://i-blog.csdnimg.cn/blog_migrate/431a543158a68ff37065eaec0428d262.jpeg" title="在这里插入图片描述" class="gallery-item"><img src="https://i-blog.csdnimg.cn/blog_migrate/431a543158a68ff37065eaec0428d262.jpeg" alt="在这里插入图片描述"></a><br>㈠ <strong>反对幂指三</strong>（反三角函数，对数，幂函数，指数函数，三角函数）谁靠前谁当u，靠后的当v【<strong>这样好计算</strong>】<br>㈡分部积分比较好写套路不多。</p>
<p>然后就没啦，&#x3D;&#x3D;多做几道题练练&#x3D;&#x3D;</p>
<hr>
<p>四·<strong>有理函数的积分</strong><br>㈠有理函数的积分：<br>　　被积函数是假分式的话，可以化成多项式和真分式的和<br>　　被积函数是真分式的话，可以化成两个多项式乘积，然后变成多项式相加减（感觉类似于高中数列的裂项求和）<br>【分两个多项式乘积的时候，分子x的幂要比分母第一级，然后利用待定系数法各个系数】</p>
<blockquote>
<p>p214，p215，这三道例题。</p>
</blockquote>
<p>㈡可化为有理函数的积分<br>  ① 例四这道题给的sinx，cosx，用tan代换了，可以把结论背下来。<br>  ②其他复杂的分母还是用u代替，简化计算过程。</p>
<hr>
<p>五·<em>积分表的使用</em><br><strong>自我感觉还是不使用为好</strong></p>
<hr>
<p><strong>方法学的多了，做题更难了。。。可能都不知道用哪种方法了……</strong></p>
<hr>
<p><a href="https://blog.csdn.net/qq_43604520/article/details/86083891">第三章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/86100636">第五章</a><br><a href="https://blog.csdn.net/qq_43604520/article/details/88982980">第七章</a></p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>高数</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo本地与云端布局不同处理办法</title>
    <url>/2025-02-25/Hexo%E6%9C%AC%E5%9C%B0%E4%B8%8E%E4%BA%91%E7%AB%AF%E5%B8%83%E5%B1%80%E4%B8%8D%E5%90%8C%E5%A4%84%E7%90%86%E5%8A%9E%E6%B3%95/</url>
    <content><![CDATA[<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/css/lightgallery.min.css" /><div class=".article-gallery"><p>前两个方法都用过的话，直接使用第三个方法。</p>
<h2 id="1-清空缓存"><a href="#1-清空缓存" class="headerlink" title="1.清空缓存"></a>1.清空缓存</h2><p>浏览器打开云端网址。 <code>shift + F5</code>，强制清空缓存。</p>
<h2 id="2-Hexo-clear"><a href="#2-Hexo-clear" class="headerlink" title="2.Hexo clear"></a>2.Hexo clear</h2><p>运行 <code>hexo c &amp;&amp; hexo g</code></p>
<p>然后重新部署<code>hexo d</code></p>
<p>接着再使用第一步的<code>shift + F5</code></p>
<h2 id="3-删除文件"><a href="#3-删除文件" class="headerlink" title="3.删除文件"></a>3.删除文件</h2><p>删除hexo根目录下的这两个文件夹</p>
<p><a href="/../images/wj1.png" class="gallery-item"><img src="/../images/wj1.png"></a></p>
<p>然后再用2的方法部署项目。</p>
</div><script src="https://cdn.jsdelivr.net/lightgallery.js/1.0.1/js/lightgallery.min.js"></script><script>if (typeof lightGallery !== 'undefined') {
        var options = {
            selector: '.gallery-item'
        };
        lightGallery(document.getElementsByClassName('.article-gallery')[0], options);
        }</script>]]></content>
      <tags>
        <tag>脱坑笔记</tag>
      </tags>
  </entry>
</search>
